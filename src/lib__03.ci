#ifndef LIB__03_CI
#define LIB__03_CI

#define BYTELEN(s)   (sizeof(s)) 
#define ARRAYLEN(s)  (sizeof(s)/sizeof(*s)) 
#define ARRAY_LEN     ARRAYLEN
#define ARRAY_SIZE    ARRAYLEN 
//#define STRLEN(s)  (ARRAYLEN(s)-1) 
// Beware of a string like "bob\0and\0mary", whose the preprocessor STRLEN will never behave like the compile-one (12 vs 3). 
// Therefore this one is kind of more accurate. 

#define DIGIT_TO_STRING(d) (			\
			    (d) == 0 ? "0" :	\
			    (d) == 1 ? "1" :	\
			    (d) == 2 ? "2" :	\
			    (d) == 3 ? "3" :	\
			    (d) == 4 ? "4" :	\
			    (d) == 5 ? "5" :	\
			    (d) == 6 ? "6" :	\
			    (d) == 7 ? "7" :	\
			    (d) == 8 ? "8" :	\
			    (d) == 9 ? "9" :	\
			    "?")

#define DIGIT_TO_CHAR(d) (((d) >= 0 && (d) <= 9) ? '0' + (d) : '?') 

#define INT_SIZEOF__TO__STRING_SIZEOF(INT_SIZEOF) \
  (1 + (1 == (INT_SIZEOF) ? (sizeof("256")) : 2 == (INT_SIZEOF) ? (sizeof("65536")) : 4 == (INT_SIZEOF) ? (sizeof("4294967296")) : 8 == (INT_SIZEOF) ? (sizeof("18446744073709551616")) : -1))

// BITSIZE >> 3 
#define BITSIZE_TO_BYTESIZE(BITSIZE)					\
  (8 == (BITSIZE) ? 1 : 16 == (BITSIZE) ? 2 : 32 == (BITSIZE) ? 4 : 64 == (BITSIZE) ? 8 : -1) 

// BYTESIZE << 3 
#define BYTESIZE_TO_BITSIZE(BYTESIZE)					\
  (1 == (BYTESIZE) ? 8 : 2 == (BYTESIZE) ? 16 : 4 == (BYTESIZE) ? 32 : 8 == (BYTESIZE) ? 64 : -1) 

static char hexdigit(const int v) { 
  assert(v >= 0); 
  assert(v < 16); 
  return (v < 10) ? (v + '0') : (v - 10 + 'A'); 
}; 
 
static char * strcpy_malloc(const char * cstr) {
  if (cstr == NULL) return NULL; 
  const int cstr_len = strlen(cstr); 
  char * copy_cstr = malloc((cstr_len+1) * (sizeof(char))); 
  return strcpy(copy_cstr, cstr);
}; 

#define strcopy        strcpy_malloc 
#define strcopy_malloc strcpy_malloc 

static int16_t strcpy_buffer(const char * cstr, char * buffer, const int16_t buffer_bytesize) { 
  if (NULL == cstr) return -1; 
  if (NULL == buffer) return -2; 
  const int16_t cstr_bytesize = 1 + strlen(cstr); 
  if (cstr_bytesize > buffer_bytesize) return -3; 
  bcopy(cstr, buffer, cstr_bytesize); 
  return cstr_bytesize; 
}; 


// =================================================================================================== 
// ENDIANNESS 

#ifndef ENDIANNESS
#  error ENDIANNESS is not defined 
#endif 

#define ENDIANNESS__SWAP__UINT8(a) (a) 
#define ENDIANNESS__SWAP__UINT16(a) (  ((char *)(&(a)))[0] ^= ((char *)(&(a)))[1], ((char *)(&(a)))[1] ^= ((char *)(&(a)))[0], ((char *)(&(a)))[0] ^= ((char *)(&(a)))[1], (a)  ) 
#define ENDIANNESS__SWAP__UINT32(a) (  ((char *)(&(a)))[0] ^= ((char *)(&(a)))[3], ((char *)(&(a)))[3] ^= ((char *)(&(a)))[0], ((char *)(&(a)))[0] ^= ((char *)(&(a)))[3], ((char *)(&(a)))[2] ^= ((char *)(&(a)))[1], ((char *)(&(a)))[1] ^= ((char *)(&(a)))[2], ((char *)(&(a)))[2] ^= ((char *)(&(a)))[1], (a)  ) 
#define ENDIANNESS__SWAP__UINT64(a) (  ((char *)(&(a)))[0] ^= ((char *)(&(a)))[7], ((char *)(&(a)))[7] ^= ((char *)(&(a)))[0], ((char *)(&(a)))[0] ^= ((char *)(&(a)))[7], ((char *)(&(a)))[6] ^= ((char *)(&(a)))[1], ((char *)(&(a)))[1] ^= ((char *)(&(a)))[6], ((char *)(&(a)))[6] ^= ((char *)(&(a)))[1], ((char *)(&(a)))[2] ^= ((char *)(&(a)))[5], ((char *)(&(a)))[5] ^= ((char *)(&(a)))[2], ((char *)(&(a)))[2] ^= ((char *)(&(a)))[5], ((char *)(&(a)))[3] ^= ((char *)(&(a)))[4], ((char *)(&(a)))[4] ^= ((char *)(&(a)))[3], ((char *)(&(a)))[3] ^= ((char *)(&(a)))[4], (a)  ) 
#define ENDIANNESS__IDENTITY(a) (a) 

#ifndef ENDIANNESS 
#  error ENDIANNESS is not defined 
#else
#define little 1
#define big 2 
#if ENDIANNESS == little
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT8  ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT16 ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT32 ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT64 ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_BIG__UINT8  ENDIANNESS__SWAP__UINT8
#  define ENDIANNESS__NATIVE_TO_BIG__UINT16 ENDIANNESS__SWAP__UINT16
#  define ENDIANNESS__NATIVE_TO_BIG__UINT32 ENDIANNESS__SWAP__UINT32
#  define ENDIANNESS__NATIVE_TO_BIG__UINT64 ENDIANNESS__SWAP__UINT64
#elif ENDIANNESS == big 
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT8  ENDIANNESS__SWAP__UINT8
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT16 ENDIANNESS__SWAP__UINT16
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT32 ENDIANNESS__SWAP__UINT32
#  define ENDIANNESS__NATIVE_TO_LITTLE__UINT64 ENDIANNESS__SWAP__UINT64
#  define ENDIANNESS__NATIVE_TO_BIG__UINT8  ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_BIG__UINT16 ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_BIG__UINT32 ENDIANNESS__IDENTITY
#  define ENDIANNESS__NATIVE_TO_BIG__UINT64 ENDIANNESS__IDENTITY
#else 
#  error unknown endianness 
#endif 
#undef little
#undef big
#endif 


static void endianness__check_and_assert(void) { 
  { 
    char buffer[2]; 
    buffer[0] = 0; 
    buffer[1] = 0; 
    *((int16_t *) buffer) = 1; 
#if ENDIANNESS == little
    assert(1 == buffer[0]); 
#elif ENDIANNESS == big 
    assert(1 == buffer[0]); 
#else 
    assert(false); 
#endif 
  }; 

  { 
    char buffer[2]; 
    buffer[0] = 11; 
    buffer[1] = 77; 
    //dprintf(stderr_d, "buffer avant = %d\n", (int) *((int16_t *) buffer)); 
    *((int16_t *) buffer) = ENDIANNESS__SWAP__UINT16(*((int16_t *) buffer)); 
    //dprintf(stderr_d, "buffer après = %d\n", (int) *((int16_t *) buffer)); 
    assert(11 == buffer[1]); 
    assert(77 == buffer[0]); 
  }; 

  { 
    char buffer[4]; 
    buffer[0] = 11; 
    buffer[1] = 77; 
    buffer[2] = 101; 
    buffer[3] = 42; 
    //dprintf(stderr_d, "buffer avant = %d\n", (int) *((int32_t *) buffer)); 
    *((int32_t *) buffer) = ENDIANNESS__SWAP__UINT32(*((int32_t *) buffer)); 
    //dprintf(stderr_d, "buffer après = %d\n", (int) *((int32_t *) buffer)); 
    assert(11  == buffer[3]); 
    assert(77  == buffer[2]); 
    assert(101 == buffer[1]); 
    assert(42  == buffer[0]); 
  }; 

  { 
    char buffer[8]; 
    buffer[0] = 11; 
    buffer[1] = 77; 
    buffer[2] = 101; 
    buffer[3] = 42; 
    buffer[4] = 3; 
    buffer[5] = 0; 
    buffer[6] = 82; 
    buffer[7] = 4; 
    //dprintf(stderr_d, "buffer avant = %lld\n", (long long int) *((int64_t *) buffer)); 
    *((int64_t *) buffer) = ENDIANNESS__SWAP__UINT64(*((int64_t *) buffer)); 
    //dprintf(stderr_d, "buffer après = %lld\n", (long long int) *((int64_t *) buffer)); 
    assert(11  == buffer[7]); 
    assert(77  == buffer[6]); 
    assert(101 == buffer[5]); 
    assert(42  == buffer[4]); 
    assert(3   == buffer[3]); 
    assert(0   == buffer[2]); 
    assert(82  == buffer[1]); 
    assert(4   == buffer[0]); 
  }; 
}; 













// =================================================================================================== 
// UTILS 


static char encoded_char_2_special_char(const char encoded_char) {
  char c; 
  switch (encoded_char) {
  case '0': c = '\0'; break; 
  case 'a': c = '\a'; break; 
  case 'b': c = '\b'; break; 
  case 't': c = '\t'; break; 
  case 'n': c = '\n'; break; 
  case 'v': c = '\v'; break; 
  case 'f': c = '\f'; break; 
  case 'r': c = '\r'; break; 
  case 'e': c = '\e'; break; 
  default: c = encoded_char; break; 
  };
  return c; 
}; 

static char * /* encoded_char */ special_char_2_encoded_char(const char special_char, char * buffer, const int16_t buffer_bytesize, int16_t * buffer_bytesize_used_r) {
  if (NULL == buffer) return NULL;
  if (3 > buffer_bytesize) return NULL; 
  
  buffer[0] = '\\'; 
  switch (special_char) {
  case '\0': buffer[1] = '0'; break; 
  case '\a': buffer[1] = 'a'; break; 
  case '\b': buffer[1] = 'b'; break; 
  case '\t': buffer[1] = 't'; break; 
  case '\n': buffer[1] = 'n'; break; 
  case '\v': buffer[1] = 'v'; break; 
  case '\f': buffer[1] = 'f'; break; 
  case '\r': buffer[1] = 'r'; break; 
  case '\e': buffer[1] = 'e'; break; 
  case '\\': buffer[1] = '\\'; break; 
  case '\'': buffer[1] = '\''; break; 
  default: buffer[0] = special_char; buffer[1] = '\0'; break; 
  };
  buffer[2] = '\0'; 
  
  if (NULL != buffer_bytesize_used_r) *buffer_bytesize_used_r = 3; 
  return buffer;
};


static int int_member_array_nb(const int n, const int size, const int int_array[]) {
  for (int i = 0; i < size; i++) {
    if (n == int_array[i]) return true; 
  }; 
  return false; 
}; 

#define int_member_array(n,int_array) (int_member_array_nb(((n)),(ARRAY_SIZE((int_array))),((int_array))))

#define int_member_huh(n,...) int_member_array((n), ((const int []) { __VA_ARGS__ })) 

static int char_member_zarray(const char c, const char zarray[]) { 
  do {
    if (*zarray == '\0') return false; 
    if (*zarray == c) return true; 
    zarray++; 
    continue; 
  } while (true); 
}; 
  
static char char_printable_filter(const int v) {
  if (('0' <= v) && ('9' >= v)) return v; 
  if (('a' <= v) && ('z' >= v)) return v; 
  if (('A' <= v) && ('Z' >= v)) return v; 
  if ('_' == v) return v; 
  if ('!' == v) return v; 
  return '.'; 
}; 


#if 0
static void char_array__print(const int filedes, const int nb, const char char_array[]) {
  dputs(filedes, "[ "); 
  for (int i = 0; i < nb; i++) {
    dputn(filedes, (int) char_array[i]); 
    if ((i+1) != nb) dputs(filedes, ", "); 
  }; 
  dputs(filedes, " ]"); 
}; 


static void int_array__print(const int filedes, const int nb, const int int_array[]) {
  dputs(filedes, "[ "); 
  for (int i = 0; i < nb; i++) {
    dputn(filedes, int_array[i]); 
    if ((i+1) != nb) dputs(filedes, ", "); 
  }; 
  dputs(filedes, " ]"); 
}; 
#endif 

#endif /* LIB__03_CI */
