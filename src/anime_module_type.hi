#ifndef ANIME_TYPE_H 
#define ANIME_TYPE_H 

enum { ANIME_ACTIONS_SIZE = 15 }; 
enum { ANIME_EVENTS_SIZE  = 15 }; 
enum { ANIME_MEMBRES_SIZE = 15 }; 
enum { ANIME_RACINES_SIZE = ANIME_MEMBRES_SIZE }; 
enum { ANIME_EXPR_SIZE    = INT8_MAX }; 
enum { ANIME_EVENTS_TOUS, ANIME_EVENTS_AUCUN, ANIME_EVENTS_CODE }; 

enum { ANIME_USERDATA_BYTESIZE = INT8_MAX }; 

enum { ANIME__ERROR_BUFFER_SIZE = (1 << 11) }; 
enum { ANIME__STRING_STACK_SIZE = (1 << 12) }; 
enum { ANIME__LEXEME_STACK_SIZE = (1 << 10) }; 
enum { ANIME__LEXEME_VALUE_STACK_SIZE = (1 << 12) }; 

typedef int16_t int_anime_string_t; 
typedef int16_t int_lexeme_value_t; 
typedef int16_t int_lexeme_t; 
typedef  int8_t int_expr_t; 
typedef uint8_t int_anime_token_type_t; 

enum { ANIME__ENDIANNESS_UNSPECIFIED = 0 }; 
enum { ANIME__ENDIANNESS_LITTLE      = 1 }; 
enum { ANIME__ENDIANNESS_BIG         = 2 }; 
enum { ANIME__ENDIANNESS_NATIVE      = 3 }; 


struct anime_t { 
  // RL: Chunks data 
  uint32_t this_bytesize; // RL: Toujours en little endian. 
  int8_t   this_typename_bytesize; 
  char     this_typename[16]; 
  uint8_t  version_major; 
  uint8_t  version_minor; 
  uint8_t  version_revision; 
  uint8_t  endianness_flag; 

  // RL: Anime data 
  //uint8_t malloced_flag; // 0 if not, 1 if yes. 
  int     stdlog_d; // Foreign — we don't own it; valid only if 'stdlog_d > 0' 
  
  int8_t filled_huh; // Values: 
  // 0: not done 
  //-1; currently being filled
  // 1: yes and checked and consistent; 
  // 2; yes, but unchecked; 
  // 3: yes and checked, but has breaking unconsistencies; 
  // 4: yes and checked, but has non-breaking unconsistencies; 
  
  int_anime_error_t  error_id; // 0: none; …<0: error; …>0: warning 
  char               error_str[ANIME__ERROR_BUFFER_SIZE]; 
  uint16_t           error_size; 
  
  char               string_stack[ANIME__STRING_STACK_SIZE]; 
  uint16_t           string_stack_nb; 
  
  int_anime_string_t copyright;   
  int_anime_string_t filename; 
  
  char               lexeme_value_stack[ANIME__LEXEME_VALUE_STACK_SIZE];
  int_lexeme_value_t lexeme_value_stack__size; 
  int_lexeme_value_t lexeme_value_stack__nb; 
  
  int_anime_token_type_t lexeme_stack__type   [ANIME__LEXEME_STACK_SIZE]; 
  int16_t                lexeme_stack__line1  [ANIME__LEXEME_STACK_SIZE]; 
  int8_t                 lexeme_stack__col0   [ANIME__LEXEME_STACK_SIZE]; 
  int16_t                lexeme_stack__offset0[ANIME__LEXEME_STACK_SIZE]; 
  int8_t                 lexeme_stack__len    [ANIME__LEXEME_STACK_SIZE]; 
  int_lexeme_value_t     lexeme_stack__value  [ANIME__LEXEME_STACK_SIZE]; 
  int_lexeme_t           lexeme_stack__size; 
  int_lexeme_t           lexeme_stack__nb; 


  

  float choc_longueur;
  float choc_largeur;
  float choc_hauteur;
  float masse;
  
  int16_t vie;
  int8_t  invincible;
  int8_t  hostile;
  
  int_anime_string_t actions_nom                 [ANIME_ACTIONS_SIZE];
  int_anime_string_t actions_affichage           [ANIME_ACTIONS_SIZE];
  int_anime_string_t actions_icone               [ANIME_ACTIONS_SIZE];
  int_anime_string_t actions_gestionnaire_fichier[ANIME_ACTIONS_SIZE];
  int_anime_string_t actions_gestionnaire_proc   [ANIME_ACTIONS_SIZE];
  int8_t             actions_size;
  int8_t             actions_nb;
  
  int_anime_string_t events_nom                    [ANIME_EVENTS_SIZE]; 
  int8_t             events_genere_type            [ANIME_EVENTS_SIZE]; 
  int_anime_string_t events_genere_code_fichier    [ANIME_EVENTS_SIZE]; 
  int_anime_string_t events_genere_code_proc       [ANIME_EVENTS_SIZE]; 
  int_anime_string_t events_traitement_code_fichier[ANIME_EVENTS_SIZE]; 
  int_anime_string_t events_traitement_code_proc   [ANIME_EVENTS_SIZE]; 
  int8_t             events_size;
  int8_t             events_nb;
  
  int_anime_string_t membres_nom        [ANIME_MEMBRES_SIZE]; 
  int_anime_string_t membres_image      [ANIME_MEMBRES_SIZE]; 
  float              membres_largeur    [ANIME_MEMBRES_SIZE]; 
  float              membres_hauteur    [ANIME_MEMBRES_SIZE]; 
  float              membres_angle_max_y[ANIME_MEMBRES_SIZE]; 
  int8_t             membres_size; 
  int8_t             membres_nb; 
  
  int_anime_string_t racines_qui    [ANIME_RACINES_SIZE]; 
  float              racines_x      [ANIME_RACINES_SIZE]; 
  float              racines_y      [ANIME_RACINES_SIZE]; 
  float              racines_z      [ANIME_RACINES_SIZE]; 
  float              racines_angle_y[ANIME_RACINES_SIZE]; 
  int8_t             racines_size; 
  int8_t             racines_nb; 

  // FRA: À terme, il devra remplacer les trucs ci-dessous qui sont trop compliqués. 
  int_lexeme_t       expr_lexeme_start_i[ANIME_EXPR_SIZE];
  int8_t             expr_lexemes_nb    [ANIME_EXPR_SIZE];
#if 0
  float              expr_value_float   [ANIME_EXPR_SIZE];
  int16_t            expr_value_int16   [ANIME_EXPR_SIZE];
  int8_t             expr_value_bool    [ANIME_EXPR_SIZE];
#endif 
  int_expr_t         expr_nb; 
  
  // FRA: Si l'utilisateur veut ajouter des données. 
  char               userdata           [ANIME_USERDATA_BYTESIZE];
  int8_t             userdata_nb;
  int8_t             userdata_bytesize;
  

  // EXPR 
#define DECLARE_EXPR_1(ident1) int_expr_t glue2(ident1,__expr);
#define DECLARE_EXPR_3(ident1,ident2,ident3) DECLARE_EXPR_1(ident1); DECLARE_EXPR_1(ident2); DECLARE_EXPR_1(ident3);
#define DECLARE_EXPR_4(ident1,ident2,ident3,ident4) DECLARE_EXPR_1(ident1); DECLARE_EXPR_1(ident2); DECLARE_EXPR_1(ident3); DECLARE_EXPR_1(ident4);

#define DECLARE_EXPR_ARRAY_1(__array_prefix__,ident1,__array_size__) int_expr_t glue3(__array_prefix__,ident1,__expr)[__array_size__]; 
#define DECLARE_EXPR_ARRAY_5(__array_prefix__,ident1,ident2,ident3,ident4,ident5,__array_size__) \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident1,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident2,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident3,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident4,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident5,__array_size__); \
  /* END OF MACRO */
#define DECLARE_EXPR_ARRAY_6(__array_prefix__,ident1,ident2,ident3,ident4,ident5,ident6,__array_size__) \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident1,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident2,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident3,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident4,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident5,__array_size__); \
  DECLARE_EXPR_ARRAY_1(__array_prefix__,ident6,__array_size__); \
  /* END OF MACRO */

  DECLARE_EXPR_4(choc_longueur,choc_largeur,choc_hauteur,masse); 
  DECLARE_EXPR_3(vie,invincible,hostile); 
  DECLARE_EXPR_ARRAY_5(actions_,nom,affichage,icone,gestionnaire_fichier,gestionnaire_proc,ANIME_ACTIONS_SIZE); 
  DECLARE_EXPR_ARRAY_6(events_,nom,genere_type,genere_code_fichier,genere_code_proc,traitement_code_fichier,traitement_code_proc,ANIME_EVENTS_SIZE); 
  DECLARE_EXPR_ARRAY_5(membres_,nom,image,largeur,hauteur,angle_max_y,ANIME_MEMBRES_SIZE); 
  DECLARE_EXPR_ARRAY_5(racines_,qui,x,y,z,angle_y,ANIME_RACINES_SIZE); 


  
#if 0   
  const char * temp_code_fichier; 
  const char * temp_code_proc; 
  
  int          temp_events_genere_type;
  const char * temp_events_genere_code_fichier;
  const char * temp_events_genere_code_proc; 
  
  const char * temp_events_par_code_fichier; 
  const char * temp_events_par_code_proc; 
  
  const char * temp_events_traitement_code_fichier; 
  const char * temp_events_traitement_code_proc; 
#endif 
}; 


extern const int16_t anime_t_sizeof;

extern const char *       anime__string_stack__get(const anime_t * this, const int_anime_string_t astr); 
extern int_anime_string_t anime__string_stack__push_nolookup(anime_t * this, const char * cstr); 
extern int_anime_string_t anime__string_stack__lookup(const anime_t * this, const char * cstr); 
extern int_anime_string_t anime__string_stack__push_lookup(anime_t * this, const char * cstr); 

extern int8_t anime__actions_push(anime_t * this, const char * nom, const char * affichage, const char * icone, const char * gestionnaire_fichier, const char * gestionnaire_proc); 
extern int8_t anime__events_push (anime_t * this, const char * nom, const int8_t genere_type, const char * genere_code_fichier, const char * genere_code_proc, const char * traitement_fichier, const char * traitement_proc); 
extern int8_t anime__membres_push(anime_t * this, const char * nom, const char * image, const float largeur, const float hauteur, const float angle_max_y); 
extern int8_t anime__racines_push(anime_t * this, const char * qui, const float x, const float y, const float z, const float angle_y); 

extern int8_t anime__membres_lookup(const anime_t * this, const char * nom); 



extern int_lexeme_t anime__lexeme_stack__push(anime_t * this, const int8_t type, const char * rstr, const int8_t len, const int16_t line1, const int8_t col0, const int16_t offset0); 
extern void         anime__lexeme__print_all(const anime_t * this, const int stdout_d); 
extern void         anime__lexeme__print_stats(const anime_t * this, const int8_t new_line_huh, const int filedes); 


extern int_expr_t anime_expr_push(anime_t * this, const int_lexeme_t expr_lexeme_start_i, const int8_t expr_lexemes_nb); 


extern void * anime__userdata_alloc(anime_t * this, const int8_t requested_bytesize); 


#endif /* ANIME_TYPE_H */
