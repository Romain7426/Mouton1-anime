
#ifdef BUFFERED_OUTSTREAM__H 
#  ifdef BUFFERED_OUTSTREAM__C 
#    error Exclusivement soit BUFFERED_OUTSTREAM__H soit BUFFERED_OUTSTREAM__C 
#  endif 
#else
#  ifndef BUFFERED_OUTSTREAM__C 
#    define BUFFERED_OUTSTREAM__H 
#  endif 
#endif 

#ifdef BUFFERED_OUTSTREAM__H 
#  define BUFFERED_OUTSTREAM__H__ALREADY_INCLUDED 
#endif 

#ifdef BUFFERED_OUTSTREAM__C 
#  define BUFFERED_OUTSTREAM__C__ALREADY_INCLUDED 
#endif 

#ifdef BUFFERED_OUTSTREAM__H 
#  define EMPTY_ARRAY_DEFINITION 
#  define VALUE_DEFINITION(value)
#else 
#  define EMPTY_ARRAY_DEFINITION = { } 
#  define VALUE_DEFINITION(value) = value
#endif 

#ifndef EXTERN 
#  define EXTERN extern
#endif

#define extern 1
#define static 2
// RL: Lors d’une définition ‘extern’, le mot-clef ‘extern’ doit ne pas être énoncé. 
//     Lors d’une définition ‘static’, le mot-clef ‘static’ doit être répété. 
//     D’où la macro ‘EXTERN_DEFINITION’. 
#if   (EXTERN == extern) 
#  define EXTERN_DECLARATION extern
#  define EXTERN_DEFINITION 
#elif (EXTERN == static) 
#  define EXTERN_DECLARATION static
#  define EXTERN_DEFINITION  static
#else 
#  define EXTERN_DECLARATION extern
#  define EXTERN_DEFINITION 
#endif 
#undef extern 
#undef static 


#include <unistd.h> /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html */ /* https://en.wikipedia.org/wiki/Unistd.h */ 
#include <signal.h> /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html */ 
#include <fcntl.h>  /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/fcntl.h.html  */ 

#if 0 
// Pour intercaler une mémoire tampon, 
// l’idée est d’utiliser un pipe. 
// man 2 pipe 
// man 2 fcntl
// man 2 getpid 
// man 2 _exit
#endif 

#ifndef assert
//#define assert(cond) { if (!(cond)) { _exit(-128); }; }; 
#  define assert(cond) { if (!(cond)) { raise(SIGABRT); }; }; 
#endif 

#ifndef ARRAY_SIZE 
#  define ARRAY_SIZE(s) (sizeof(s)/sizeof(*s)) 
// Beware of a string like "bob\0and\0mary", whose the preprocessor STRLEN will never behave like the compile-one (12 vs 3). 
// Therefore this one is kind of more accurate. 
#endif 



#ifdef BUFFERED_OUTSTREAM__C 
#  ifndef BUFFERED_OUTSTREAM__MAX 
enum { BUFFERED_OUTSTREAM__COUNT = 8 }; 
#  else 
enum { BUFFERED_OUTSTREAM__COUNT = BUFFERED_OUTSTREAM__MAX }; 
#  endif 
#endif /* BUFFERED_OUTSTREAM__C */


#ifdef BUFFERED_OUTSTREAM__C 

static int     buffered_outstream__init_huh = false; 
static int     buffered_outstream__handler_installed_huh = false; 

static int     buffered_outstream__pipe[BUFFERED_OUTSTREAM__COUNT << 1] EMPTY_ARRAY_DEFINITION; // RL: [0] is output (read end), [1] is input (write end) 
static int     buffered_outstream__write_fd[BUFFERED_OUTSTREAM__COUNT] EMPTY_ARRAY_DEFINITION; 
static char *  buffered_outstream__buffer[BUFFERED_OUTSTREAM__COUNT] EMPTY_ARRAY_DEFINITION; 
static int16_t buffered_outstream__buffer_bytesize[BUFFERED_OUTSTREAM__COUNT] EMPTY_ARRAY_DEFINITION; 
static int16_t buffered_outstream__buffer_used[BUFFERED_OUTSTREAM__COUNT] EMPTY_ARRAY_DEFINITION; 

static void (* buffered_outstream__former_handler)(int) = NULL; 
static void    buffered_outstream__handler(const int signal_id); 

#endif /* BUFFERED_OUTSTREAM__C */



#ifdef BUFFERED_OUTSTREAM__H 

#define BUFFERED_OUTSTREAM__ERROR__LIST					\
  X(BUFFERED_OUTSTREAM__ERROR__NONE, = 0)				\
    X(BUFFERED_OUTSTREAM__ERROR__HANDLER_CANNOT_BE_INSTALLED, )		\
    X(BUFFERED_OUTSTREAM__ERROR__HANDLER_NOT_INSTALLED, )		\
    X(BUFFERED_OUTSTREAM__ERROR__WRITE_FD_IS_NEGATIVE, )		\
    X(BUFFERED_OUTSTREAM__ERROR__FILENAME_IS_NULL, )			\
    X(BUFFERED_OUTSTREAM__ERROR__FILENAME_IS_EMPTY, )			\
    X(BUFFERED_OUTSTREAM__ERROR__BUFFER_IS_NULL, )			\
    X(BUFFERED_OUTSTREAM__ERROR__BUFFER_BYTESIZE_IS_NEG, )		\
  X(BUFFERED_OUTSTREAM__ERROR__BUFFER_BYTESIZE_IS_NULL, )		\
  X(BUFFERED_OUTSTREAM__ERROR__NO_SLOT_LEFT, )				\
  X(BUFFERED_OUTSTREAM__ERROR__CANNOT_OPEN_FILE, )			\
  X(BUFFERED_OUTSTREAM__ERROR__CANNOT_MAKE_PIPE, )			\
  X(BUFFERED_OUTSTREAM__ERROR__PIPE1_NEG, )				\
  X(BUFFERED_OUTSTREAM__ERROR__PIPE1_NOT_FOUND, )			\
  X(BUFFERED_OUTSTREAM__ERROR__NOT_INIT, )				\
  /* LAST_LINE*/

// RLE: Devrait être appelée une fois (juste une fois) afin de s’assurer que il n’y a pas d’incohérence. 
static void int_buffered_outstream__error__check_and_assert(void); 

#endif /* BUFFERED_OUTSTREAM__H */ 


#ifdef BUFFERED_OUTSTREAM__C
static void buffered_outstream__init(void) { 
  for (int i = 0; i < BUFFERED_OUTSTREAM__COUNT; i++) { 
    buffered_outstream__pipe[(i << 1) + 0] = -1; 
    buffered_outstream__pipe[(i << 1) + 1] = -1; 
    buffered_outstream__write_fd[i] = -1; 
    buffered_outstream__buffer[i] = NULL; 
    buffered_outstream__buffer_bytesize[i] = -1; 
    buffered_outstream__buffer_used[i] = -1; 
  }; 
  buffered_outstream__init_huh = true; 
};
#endif /* BUFFERED_OUTSTREAM__C */

#ifdef BUFFERED_OUTSTREAM__C 
static int buffered_outstream__get_new_slot_id(void) { 
  for (int i = 0; i < BUFFERED_OUTSTREAM__COUNT; i++) { 
    if (-1 == buffered_outstream__write_fd[i]) return i; 
  }; 
  return -1; 
};
#endif /* BUFFERED_OUTSTREAM__C */

#ifdef BUFFERED_OUTSTREAM__C 
static int buffered_outstream__lookup_slot_by_pipe1(const int pipe1) { 
  for (int i = 0; i < BUFFERED_OUTSTREAM__COUNT; i++) { 
    if (pipe1 == buffered_outstream__pipe[(i << 1) + 1]) return i; 
  }; 
  return -1; 
};
#endif /* BUFFERED_OUTSTREAM__C */




#define buffered_outstream__open glue2(BUFFERED_OUTSTREAM__PREFIX,buffered_outstream__open)

#ifdef BUFFERED_OUTSTREAM__H 
EXTERN_DECLARATION int buffered_outstream__open(const int write_fd, char * buffer, const int16_t buffer_bytesize); 
#else /* BUFFERED_OUTSTREAM__C */
EXTERN_DEFINITION int buffered_outstream__open(const int write_fd, char * buffer, const int16_t buffer_bytesize) { 
  int error_id = BUFFERED_OUTSTREAM__ERROR__NONE; 
  if (!buffered_outstream__init_huh) goto label__init; 
  if (!buffered_outstream__handler_installed_huh) goto label__install_handler; 
  goto label__body; 

  label__exit: { 
    return error_id; 
  }; 
  
 label__install_handler: { 
    buffered_outstream__former_handler = signal(SIGIO, buffered_outstream__handler); 
    if (SIG_ERR == buffered_outstream__former_handler) { error_id = BUFFERED_OUTSTREAM__ERROR__HANDLER_CANNOT_BE_INSTALLED; goto label__exit; }; 
    buffered_outstream__handler_installed_huh = true; 
    goto label__body; 
  }; 
  
  label__init: { 
    buffered_outstream__init(); 
    goto label__install_handler; 
  }; 
  
  label__body: { 
    if (0 >         write_fd) { error_id = BUFFERED_OUTSTREAM__ERROR__WRITE_FD_IS_NEGATIVE;        goto label__exit; }; 
#if 0 
    if (NULL ==     filename) { error_id = BUFFERED_OUTSTREAM__ERROR__FILENAME_IS_NULL;            goto label__exit; }; 
    if ('\0' ==    *filename) { error_id = BUFFERED_OUTSTREAM__ERROR__FILENAME_IS_EMPTY;           goto label__exit; };  
#endif 
    if (NULL ==       buffer) { error_id = BUFFERED_OUTSTREAM__ERROR__BUFFER_IS_NULL;              goto label__exit; }; 
    if (0 >  buffer_bytesize) { error_id = BUFFERED_OUTSTREAM__ERROR__BUFFER_BYTESIZE_IS_NEG; goto label__exit; }; 
    if (0 == buffer_bytesize) { error_id = BUFFERED_OUTSTREAM__ERROR__BUFFER_BYTESIZE_IS_NULL;     goto label__exit; }; 
    
    const int slot_id = buffered_outstream__get_new_slot_id(); 
    if (0 > slot_id) { error_id = BUFFERED_OUTSTREAM__ERROR__NO_SLOT_LEFT; goto label__exit; }; 
    
#if 0 
    int new_fd; 
    if      (cstr_equal_huh("stdout", filename)) { new_fd = 1; } 
    else if (cstr_equal_huh("stderr", filename)) { new_fd = 2; } 
    else { 
      if (cstr_equal_huh("stdnull", filename)) { filename = "/dev/null"; }; 
      new_fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0666); 
      //buffered_outstream__write_fd[my_stream_id] = open(path, flags, (mode_t) 0666); 
      if (new_fd < 0) { error_id = BUFFERED_OUTSTREAM__ERROR__CANNOT_OPEN_FILE; goto label__exit; }; 
    };
#endif 
    
    int * my_pipe = (buffered_outstream__pipe + (slot_id << 1)); 
    if (-1 == pipe(my_pipe)) { error_id = BUFFERED_OUTSTREAM__ERROR__CANNOT_MAKE_PIPE; goto label__exit; }; 
    fcntl(my_pipe[0], F_SETOWN, getpid()); // RL: Qui recevra le signal SIGIO? 
    fcntl(my_pipe[0], F_SETFL, O_ASYNC | O_NONBLOCK); // RL: Générer le signal SIGIO + Ne pas bloquer en cas de poll. 
    //fcntl(my_pipe[0], F_SETSIG, SIGUSR);// RL: Pour générer autre chose que SIOGIO? 
    
    // RL: Inutile. 
    // RL: Utile uniquement quand on veut réassigner stdout. 
    //dup2(pipe_write_fd, fileno(stdout)); 
    
    buffered_outstream__write_fd       [slot_id] = write_fd; 
    buffered_outstream__buffer         [slot_id] = buffer; 
    buffered_outstream__buffer_bytesize[slot_id] = buffer_bytesize; 
    buffered_outstream__buffer_used    [slot_id] = 0; 
    
    return my_pipe[1]; 
  }; 
};
#endif /* BUFFERED_OUTSTREAM__H */


#define buffered_outstream__flush glue2(BUFFERED_OUTSTREAM__PREFIX,buffered_outstream__flush)

#ifdef BUFFERED_OUTSTREAM__H
EXTERN_DECLARATION int buffered_outstream__flush(const int pipe1);
#else /* BUFFERED_OUTSTREAM__C */
EXTERN_DEFINITION int buffered_outstream__flush(const int pipe1) { 
  int error_id = BUFFERED_OUTSTREAM__ERROR__NONE; 
  goto label__body; 
  
  label__exit: { 
    return error_id; 
  }; 
  
  label__body: { 
    if (0 > pipe1)                                  { error_id = BUFFERED_OUTSTREAM__ERROR__PIPE1_NEG;             goto label__exit; }; 
    if (!buffered_outstream__init_huh)              { error_id = BUFFERED_OUTSTREAM__ERROR__NOT_INIT;              goto label__exit; }; 
    if (!buffered_outstream__handler_installed_huh) { error_id = BUFFERED_OUTSTREAM__ERROR__HANDLER_NOT_INSTALLED; goto label__exit; }; 
    const int slot_id = buffered_outstream__lookup_slot_by_pipe1(pipe1); 
    if (0 > slot_id)                                { error_id = BUFFERED_OUTSTREAM__ERROR__PIPE1_NOT_FOUND;       goto label__exit; }; 
    
    //write(buffered_outstream__write_fd[slot_id]
    write(buffered_outstream__write_fd[slot_id], buffered_outstream__buffer[slot_id], buffered_outstream__buffer_used[slot_id]); 
    buffered_outstream__buffer_used[slot_id] = 0; 
    return error_id; 
  }; 
};
#endif /* BUFFERED_OUTSTREAM__H */


#define buffered_outstream__close glue2(BUFFERED_OUTSTREAM__PREFIX,buffered_outstream__close)

#ifdef BUFFERED_OUTSTREAM__H 
EXTERN_DECLARATION int buffered_outstream__close(const int pipe1, const int flush_huh); 
#else /* BUFFERED_OUTSTREAM__C */
EXTERN_DEFINITION int buffered_outstream__close(const int pipe1, const int flush_huh) { 
  int error_id = BUFFERED_OUTSTREAM__ERROR__NONE; 
  goto label__body; 
  
  label__exit: { 
    return error_id; 
  }; 
  
  label__body: { 
    if (0 > pipe1)                                  { error_id = BUFFERED_OUTSTREAM__ERROR__PIPE1_NEG;             goto label__exit; }; 
    if (!buffered_outstream__init_huh)              { error_id = BUFFERED_OUTSTREAM__ERROR__NOT_INIT;              goto label__exit; }; 
    if (!buffered_outstream__handler_installed_huh) { error_id = BUFFERED_OUTSTREAM__ERROR__HANDLER_NOT_INSTALLED; goto label__exit; }; 
    const int slot_id = buffered_outstream__lookup_slot_by_pipe1(pipe1); 
    if (0 > slot_id)                                { error_id = BUFFERED_OUTSTREAM__ERROR__PIPE1_NOT_FOUND;       goto label__exit; }; 
    
    if (flush_huh) { 
      write(buffered_outstream__write_fd[slot_id], buffered_outstream__buffer[slot_id], buffered_outstream__buffer_used[slot_id]); 
      buffered_outstream__buffer_used[slot_id] = 0;     
    };
    
    //close(buffered_outstream__write_fd[slot_id]); // RL: Non. ‘write_fd’ ne nous appartient pas. 
    close(buffered_outstream__pipe[(slot_id << 1) + 0]); 
    close(pipe1); 
    
    buffered_outstream__pipe           [(slot_id << 1) + 0] = -1; 
    buffered_outstream__pipe           [(slot_id << 1) + 1] = -1; 
    buffered_outstream__write_fd       [slot_id] = -1; 
    buffered_outstream__buffer         [slot_id] = NULL; 
    buffered_outstream__buffer_bytesize[slot_id] = -1; 
    buffered_outstream__buffer_used    [slot_id] = -1; 
    
    return error_id; 
  }; 
}; 
#endif /* BUFFERED_OUTSTREAM__C */


#ifdef BUFFERED_OUTSTREAM__C
static void buffered_outstream__handler(const int signal_id) { 
  // RL: Dans cette routine, nous appelons write(2) qui génère des SIGIO. 
  //     Donc nous devons désactiver le mask, et réinstaller le former_handler. 
  // RL: Symétriquement, notre handler devra être réinstallé à la sortie. 
  //     En revanche, le masque est remis automatiquement à chaque génération du signal SIGIO. 
  // RL: #include <signal.h> 
  { 
    sigset_t sigset[1]; 
    sigemptyset(sigset);
    sigaddset(sigset, SIGIO);
    signal(SIGIO, buffered_outstream__former_handler); 
    sigprocmask(SIG_UNBLOCK, sigset, NULL); 
  }; 
  goto label__body;

  label__exit: { 
    signal(SIGIO, buffered_outstream__handler); 
    return; 
  }; 
 
  label__pas_nous: {
    if (NULL == buffered_outstream__former_handler) goto label__exit; 
    buffered_outstream__former_handler(signal_id); 
    goto label__exit; 
  }; 
  
  label__body: { 
    // RL: Ici, nous avons un problème: nous ne savons pas qui généra le signal. 
    //     En particulier, était-ce le nôtre ou un autre? 
    //     Donc il faut tester. 
    //     Et pour tester, pas le choix, il faut faire un read(2). 
    //     Et cette lecture doit être non bloquante, et donc le flag O_NONBLOCK doit avoir été allumé en amont. 
    //     Sinon, on reste bloqué ici. 
    
    // RL: Avant le polling, il faut vider les buffers pleins (nécessairement pour le polling). 
    int slot_id; 
    for (slot_id = 0; slot_id < BUFFERED_OUTSTREAM__COUNT; slot_id++) { 
      if (-1 == buffered_outstream__write_fd[slot_id]) continue; 
      if (buffered_outstream__buffer_bytesize[slot_id] == buffered_outstream__buffer_used[slot_id]) { 
	write(buffered_outstream__write_fd[slot_id], buffered_outstream__buffer[slot_id], buffered_outstream__buffer_used[slot_id]); 
	buffered_outstream__buffer_used[slot_id] = 0; 
      }; 
    }; 
    
    // RL: Polling 
    int at_least_one_found_huh = false; 
    for (slot_id = 0; slot_id < BUFFERED_OUTSTREAM__COUNT; slot_id++) { 
      const int my_fd = buffered_outstream__write_fd[slot_id]; 
      if (-1 == my_fd) continue; 
      int   * my_pipe   =  (buffered_outstream__pipe     + (slot_id << 1)); 
      char  * my_buffer =   buffered_outstream__buffer     [slot_id]; 
      int16_t my_used   =   buffered_outstream__buffer_used[slot_id]; 
      const int16_t my_bytesize = buffered_outstream__buffer_bytesize[slot_id]; 

      // RL: Test. 
      const ssize_t read_nb = read(my_pipe[0], my_buffer + my_used, my_bytesize - my_used); 
      if (0 >= read_nb) continue; 
      
      buffered_outstream__buffer_used[slot_id] += read_nb; 
      my_used = buffered_outstream__buffer_used[slot_id]; 
      at_least_one_found_huh = true; 
      
      // On lit le slot trouvé. 
      for (;;) { 
	// RL: On flush dès que le buffer est plein. 
	if (my_bytesize == my_used) { 
	  write(my_fd, my_buffer, my_bytesize); 
	  buffered_outstream__buffer_used[slot_id] = 0; 
	  my_used = 0; 
	}; 
	
	// RL: On continue à lire tant que il y a des données. 
	const ssize_t read_nb = read(my_pipe[0], my_buffer + my_used, my_bytesize - my_used); 
	if (0 >= read_nb) break; 
	buffered_outstream__buffer_used[slot_id] += read_nb; 
	my_used = buffered_outstream__buffer_used[slot_id]; 
      }; 
      
    }; 

    if (!at_least_one_found_huh) goto label__pas_nous; 
    
    goto label__exit; 
  }; 
}; 
#endif /* BUFFERED_OUTSTREAM__C */







// ___________________________________ 
// **** BUFFERED_OUTSTREAM__ERROR **** 

#ifdef BUFFERED_OUTSTREAM__H 

#define X(ident, value) ident value, 
enum { 
  BUFFERED_OUTSTREAM__ERROR__LIST
}; 
#undef X 

#define X(ident, value) ident##___ID, 
enum { 
  BUFFERED_OUTSTREAM__ERROR__LIST
  BUFFERED_OUTSTREAM__ERROR__COUNT
}; 
#undef X 


#define int_buffered_outstream__error_t                               glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error_t)
#define int_buffered_outstream__error__get_cstr                       glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__get_cstr)
#define int_buffered_outstream__error__id_value                       glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_value)
#define int_buffered_outstream__error__id_value__size                 glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_value__size)
#define int_buffered_outstream__error__id_value__size__compiled_value glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_value__size__compiled_value)
#define int_buffered_outstream__error__id_cstr                        glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_cstr)
#define int_buffered_outstream__error__id_cstr__size                  glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_cstr__size)
#define int_buffered_outstream__error__id_cstr__size__compiled_value  glue2(BUFFERED_OUTSTREAM__PREFIX,int_buffered_outstream__error__id_cstr__size__compiled_value)

typedef                  int8_t                          int_buffered_outstream__error_t;
// int_buffered_outstream__error -> cstr 
EXTERN_DECLARATION const char *                          int_buffered_outstream__error__get_cstr(const int_buffered_outstream__error_t error_id); 
// int_buffered_outstream__error__id -> value 
EXTERN_DECLARATION const int_buffered_outstream__error_t int_buffered_outstream__error__id_value[BUFFERED_OUTSTREAM__ERROR__COUNT]; 
enum {                                                   int_buffered_outstream__error__id_value__size = ARRAY_SIZE(int_buffered_outstream__error__id_value) }; 
EXTERN_DECLARATION const uint8_t                         int_buffered_outstream__error__id_value__size__compiled_value; 
// int_buffered_outstream__error__id -> cstr 
EXTERN_DECLARATION const char *                          int_buffered_outstream__error__id_cstr [BUFFERED_OUTSTREAM__ERROR__COUNT + 1]; 
enum {                                                   int_buffered_outstream__error__id_cstr__size = ARRAY_SIZE(int_buffered_outstream__error__id_cstr) }; 
EXTERN_DECLARATION const uint8_t                         int_buffered_outstream__error__id_cstr__size__compiled_value; 

// RL: En C, une déclaration static sans valeur est aussi une définition. 
//     En l'espèce, même si la valeur n'est pas définie, le compilateur considérera zéro comme valeur (voire nimporte laquelle).
//     Putain, je déteste le C - putain de langage de merde.
#define X(ident, value) static const int_buffered_outstream__error_t ident##__compiled_value; 
BUFFERED_OUTSTREAM__ERROR__LIST 
#undef X 

static void int_buffered_outstream__error__check_and_assert(void) { 
  assert(BUFFERED_OUTSTREAM__ERROR__COUNT <= UINT8_MAX); 
#define X(ident, value) assert(ident == ident##__compiled_value); 
BUFFERED_OUTSTREAM__ERROR__LIST 
#undef X 
  assert(int_buffered_outstream__error__id_cstr__size  == int_buffered_outstream__error__id_cstr__size__compiled_value ); 
  assert(int_buffered_outstream__error__id_value__size == int_buffered_outstream__error__id_value__size__compiled_value); 
}; 

#else /* BUFFERED_OUTSTREAM__C */

#define X(ident, value) static const int_buffered_outstream__error_t ident##__compiled_value = ident; 
BUFFERED_OUTSTREAM__ERROR__LIST 
#undef X 

#define X(ident, value) #ident, 
EXTERN_DEFINITION const char * int_buffered_outstream__error__id_cstr[BUFFERED_OUTSTREAM__ERROR__COUNT + 1] = { 
BUFFERED_OUTSTREAM__ERROR__LIST 
  NULL
}; 
#undef X 
 
EXTERN_DEFINITION const uint8_t int_buffered_outstream__error__id_cstr__size__compiled_value = ARRAY_SIZE(int_buffered_outstream__error__id_cstr); 

#define X(ident, value) ident, 
EXTERN_DEFINITION const int_buffered_outstream__error_t int_buffered_outstream__error__id_value[BUFFERED_OUTSTREAM__ERROR__COUNT] = { 
BUFFERED_OUTSTREAM__ERROR__LIST 
}; 
#undef X 

EXTERN_DEFINITION const uint8_t int_buffered_outstream__error__id_value__size__compiled_value = ARRAY_SIZE(int_buffered_outstream__error__id_value); 

EXTERN_DEFINITION const char * int_buffered_outstream__error__get_cstr(const int_buffered_outstream__error_t error_id) { 
  const char * error_id__cstr = NULL; 
  switch (error_id) { 
#define X(ident, value) case ident: error_id__cstr = #ident; break; 
  BUFFERED_OUTSTREAM__ERROR__LIST
#undef X 
  }; 
  return error_id__cstr; 
}; 

#endif /* BUFFERED_OUTSTREAM__H */

#undef EXTERN_DECLARATION
#undef EXTERN_DEFINITION
#undef EXTERN 
#undef EMPTY_ARRAY_DEFINITION
#undef VALUE_DEFINITION
