
enum { ANIME_BYTESIZE_ACTUAL = sizeof(anime_t) }; 
const int16_t anime_bytesize_actual = ANIME_BYTESIZE_ACTUAL; 
ASSERT_COMPILE__TOPLEVEL(ANIME_BYTESIZE_ACTUAL <= ANIME_BYTESIZE); 

const int16_t anime_t_sizeof = ANIME_BYTESIZE_ACTUAL; 

anime_t * anime__make(const int stdlog_d) {  
  MALLOC_BZERO(anime_t,this); 
  anime__make_r(this, stdlog_d); 
  this -> malloced_flag = 1; 
  return this; 
};  

anime_t * anime__make_r(anime_t * this, const int stdlog_d) { 
  bzero(this, sizeof(*this)); 
  
  this -> this_bytesize = ENDIANNESS__NATIVE_TO_LITTLE__UINT32(sizeof(*this)); 
  this -> this_typename_bytesize = sizeof(this -> this_typename); 
  strlcpy(this -> this_typename, "anime_t", sizeof(this -> this_typename)); 
  this -> version_major    = ANIME_VERSION_MAJOR; 
  this -> version_minor    = ANIME_VERSION_MINOR; 
  this -> version_revision = ANIME_VERSION_REVISION; 
  this -> endianness_flag  = ANIME__ENDIANNESS_NATIVE; 
  
  this -> stdlog_d = stdlog_d; 
  this -> error_size = ANIME__ERROR_BUFFER_SIZE; 

  this -> string_stack[0] = '\0'; 
  this -> string_stack_nb = 1; 
  this -> copyright = anime__string_stack__push_nolookup(this, anime_copyright); 

  this -> lexeme_value_stack[0] = '\0';
  this -> lexeme_value_stack__size = ANIME__LEXEME_VALUE_STACK_SIZE; 
  this -> lexeme_value_stack__nb = 1; 

  this -> lexeme_stack__size = ANIME__LEXEME_STACK_SIZE; 
  this -> lexeme_stack__nb   = 0; 

  this -> actions_size = ANIME_ACTIONS_SIZE; 
  this -> actions_nb   = 0; 
  this -> events_size  = ANIME_EVENTS_SIZE;
  this -> events_nb    = 0; 
  this -> membres_size = ANIME_MEMBRES_SIZE; 
  this -> membres_nb   = 0; 
  this -> racines_size = ANIME_RACINES_SIZE; 
  this -> racines_nb   = 0; 
  
  return this; 
};  

anime_t * anime__make_b(char * anime_buffer, const int16_t anime_buffer_bytesize, int16_t * anime_buffer_bytesize_used_r, const int stdlog_d) { 
  if (((size_t) anime_buffer_bytesize) < (sizeof(anime_t))) return NULL; 
  anime_t * this = (anime_t *) anime_buffer; 
  anime__make_r(this, stdlog_d); 
  if (NULL != anime_buffer_bytesize_used_r) *anime_buffer_bytesize_used_r = (sizeof(anime_t)); 
  return this; 
}; 

void anime__delete_b(anime_t * this) { 
  anime__delete_r(this); 
}; 

void anime__delete_r(anime_t * this) { 
  const int malloced_flag = this -> malloced_flag; 
  bzero(this, sizeof(*this)); 
  this -> malloced_flag = malloced_flag; 
}; 

void anime__delete(anime_t * this) { 
  const int malloced_flag = this -> malloced_flag; 
  anime__delete_r(this); 
  if (1 == malloced_flag) free(this); 
};  

void anime__bzero(anime_t * this) { 
  const int malloced_flag = this -> malloced_flag; 
  bzero(this, sizeof(*this)); 
  this -> malloced_flag = malloced_flag; 
}; 







const char *      anime__filename_get      (const anime_t * this) { return anime__string_stack__get(this, this -> filename); }; 
const char *      anime__copyright_get     (const anime_t * this) { return anime__string_stack__get(this, this -> copyright); }; 
int_anime_error_t anime__error_id_get      (const anime_t * this) { return this -> error_id; }; 
const char *      anime__error_cstr_get    (const anime_t * this) { return this -> error_str; }; 
float             anime__choc_longueur__get(const anime_t * this) { return this -> choc_longueur; }; 
float             anime__choc_largeur__get (const anime_t * this) { return this -> choc_largeur; }; 
float             anime__choc_hauteur__get (const anime_t * this) { return this -> choc_hauteur; }; 
float             anime__masse__get        (const anime_t * this) { return this -> masse; }; 
int16_t           anime__vie__get          (const anime_t * this) { return this -> vie; }; 
int8_t            anime__invincible__get   (const anime_t * this) { return this -> invincible; }; 
int8_t            anime__hostile__get      (const anime_t * this) { return this -> hostile; }; 


#define ANIME__ARRAY_GET__BODY(field_array,field_nb,field_i) { if (0 > field_i) return NULL; if (this -> field_nb <= field_i) return NULL; return anime__string_stack__get(this, this -> field_array[field_i]); } 

int8_t       anime__actions_nb__get                  (const anime_t * this) { return this -> actions_nb; }; 
const char * anime__actions_nom__get                 (const anime_t * this, const int8_t action_i) ANIME__ARRAY_GET__BODY(actions_nom,actions_nb,action_i); 
const char * anime__actions_affichage__get           (const anime_t * this, const int8_t action_i) ANIME__ARRAY_GET__BODY(actions_affichage,actions_nb,action_i); 
const char * anime__actions_icone__get               (const anime_t * this, const int8_t action_i) ANIME__ARRAY_GET__BODY(actions_icone,actions_nb,action_i); 
const char * anime__actions_gestionnaire_fichier__get(const anime_t * this, const int8_t action_i) ANIME__ARRAY_GET__BODY(actions_gestionnaire_fichier,actions_nb,action_i); 
const char * anime__actions_gestionnaire_proc__get   (const anime_t * this, const int8_t action_i) ANIME__ARRAY_GET__BODY(actions_gestionnaire_proc,actions_nb,action_i); 

int8_t       anime__events_nb__get                     (const anime_t * this) { return this -> events_nb; }; 
const char * anime__events_nom__get                    (const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_nom,events_nb,event_i); 
const char * anime__events_genere_type__get            (const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_genere_type,events_nb,event_i); 
const char * anime__events_genere_code_fichier__get    (const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_genere_code_fichier,events_nb,event_i); 
const char * anime__events_genere_code_proc__get       (const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_genere_code_proc,events_nb,event_i); 
const char * anime__events_traitement_code_fichier__get(const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_traitement_code_fichier,events_nb,event_i); 
const char * anime__events_traitement_code_proc__get   (const anime_t * this, const int8_t event_i) ANIME__ARRAY_GET__BODY(events_traitement_code_proc,events_nb,event_i); 

int8_t       anime__membres_nb__get         (const anime_t * this) { return this -> membres_nb; }; 
const char * anime__membres_nom__get        (const anime_t * this, const int8_t membre_i) ANIME__ARRAY_GET__BODY(membres_nom,membres_nb,membre_i); 
const char * anime__membres_image__get      (const anime_t * this, const int8_t membre_i) ANIME__ARRAY_GET__BODY(membres_image,membres_nb,membre_i); 
const char * anime__membres_largeur__get    (const anime_t * this, const int8_t membre_i) ANIME__ARRAY_GET__BODY(membres_largeur,membres_nb,membre_i); 
const char * anime__membres_hauteur__get    (const anime_t * this, const int8_t membre_i) ANIME__ARRAY_GET__BODY(membres_hauteur,membres_nb,membre_i); 
const char * anime__membres_angle_max_y__get(const anime_t * this, const int8_t membre_i) ANIME__ARRAY_GET__BODY(membres_angle_max_y,membres_nb,membre_i); 

int8_t       anime__racines_nb__get     (const anime_t * this) { return this -> racines_nb; }; 
const char * anime__racines_qui__get    (const anime_t * this, const int8_t racine_i) ANIME__ARRAY_GET__BODY(racines_qui,racines_nb,racine_i); 
const char * anime__racines_x__get      (const anime_t * this, const int8_t racine_i) ANIME__ARRAY_GET__BODY(racines_x,racines_nb,racine_i); 
const char * anime__racines_y__get      (const anime_t * this, const int8_t racine_i) ANIME__ARRAY_GET__BODY(racines_y,racines_nb,racine_i); 
const char * anime__racines_z__get      (const anime_t * this, const int8_t racine_i) ANIME__ARRAY_GET__BODY(racines_z,racines_nb,racine_i); 
const char * anime__racines_angle_y__get(const anime_t * this, const int8_t racine_i) ANIME__ARRAY_GET__BODY(racines_angle_y,racines_nb,racine_i); 

#undef ANIME__EVENTARRAY_GET__BODY




int8_t anime__actions_push(anime_t * this, const char * nom, const char * affichage, const char * icone, const char * gestionnaire_fichier, const char * gestionnaire_proc) {  
  if (ANIME_ACTIONS_SIZE <= this -> actions_nb) return -1; 
  const int8_t action_i = this -> actions_nb; 
  this -> actions_nom                 [action_i] = anime__string_stack__push_lookup(this, nom); 
  this -> actions_affichage           [action_i] = anime__string_stack__push_lookup(this, affichage); 
  this -> actions_icone               [action_i] = anime__string_stack__push_lookup(this, icone); 
  this -> actions_gestionnaire_fichier[action_i] = anime__string_stack__push_lookup(this, gestionnaire_fichier); 
  this -> actions_gestionnaire_proc   [action_i] = anime__string_stack__push_lookup(this, gestionnaire_proc); 
  this -> actions_nb++; 
  return action_i; 
};  

int8_t anime__events_push(anime_t * this, const char * events_nom, const int8_t events_genere_type, const char * events_genere_code_fichier, const char * events_genere_code_proc, const char * events_traitement_fichier, const char * events_traitement_proc) {  
  if (ANIME_EVENTS_SIZE <= this -> events_nb) return -1; 
  const int8_t event_i = this -> events_nb; 
  this -> events_nom                    [event_i] = anime__string_stack__push_lookup(this, events_nom); 
  this -> events_genere_type            [event_i] = events_genere_type; 
  this -> events_genere_code_fichier    [event_i] = anime__string_stack__push_lookup(this, events_genere_code_fichier); 
  this -> events_genere_code_proc       [event_i] = anime__string_stack__push_lookup(this, events_genere_code_proc); 
  this -> events_traitement_code_fichier[event_i] = anime__string_stack__push_lookup(this, events_traitement_fichier); 
  this -> events_traitement_code_proc   [event_i] = anime__string_stack__push_lookup(this, events_traitement_proc); 
  this -> events_nb++; 
  return event_i; 
};  

int8_t anime__membres_push(anime_t * this, const char * nom, const char * image, const float largeur, const float hauteur, const float angle_max_y) {  
  if (ANIME_MEMBRES_SIZE <= this -> membres_nb) return -1; 
  const int8_t membre_i = this -> membres_nb; 
  this -> membres_nom        [membre_i] = anime__string_stack__push_lookup(this, nom); 
  this -> membres_image      [membre_i] = anime__string_stack__push_lookup(this, image); 
  this -> membres_largeur    [membre_i] = largeur; 
  this -> membres_hauteur    [membre_i] = hauteur; 
  this -> membres_angle_max_y[membre_i] = angle_max_y; 
  this -> membres_nb++; 
  return membre_i; 
};  

int8_t anime__racines_push(anime_t * this, const char * qui, const float x, const float y, const float z, const float angle_y) {  
  if (ANIME_RACINES_SIZE <= this -> racines_nb) return -1; 
  const int8_t racine_i = this -> racines_nb; 
  this -> racines_qui    [racine_i] = anime__string_stack__push_lookup(this, qui); 
  this -> racines_x      [racine_i] = x; 
  this -> racines_y      [racine_i] = y; 
  this -> racines_z      [racine_i] = z; 
  this -> racines_angle_y[racine_i] = angle_y; 
  this -> racines_nb++; 
  return racine_i; 
}; 


int8_t anime__membres_lookup(const anime_t * this, const char * nom) {  
  for (int membre_i = 0; membre_i < this -> membres_nb; membre_i++) { 
    if (0 == strcmp(nom, anime__string_stack__get(this, this -> membres_nom[membre_i]))) return membre_i; 
  }; 
  return -1; 
};  
 





int_expr_t anime_expr_push(anime_t * this, const int_lexeme_t expr_lexeme_start_i, const int8_t expr_lexemes_nb) { 
  if (ANIME_EXPR_SIZE <= this -> expr_nb) { assert(false); return -1; }; 
  
  const int_expr_t expr_id = this -> expr_nb;
  
  this -> expr_nb++;
  this -> expr_lexeme_start_i[expr_id] = expr_lexeme_start_i; 
  this -> expr_lexemes_nb    [expr_id] = expr_lexemes_nb; 
  
  return expr_id; 
};


