#ifndef LIB__09__WRITE_STRING_CI
#define LIB__09__WRITE_STRING_CI

#include <unistd.h> /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html */ /* https://en.wikipedia.org/wiki/Unistd.h */ 
// write(2),  

#include <string.h> /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/string.h.html */ 
// memset(3) 

// =================================================================================================== 
// WRITE_STRING 

static int write_eol(const int file_des) { 
  write(file_des, "\n", 1); 
  return 1; 
}; 

static int /*nb_bytes_written*/ write_string(const int file_des, const char * cstr) { 
  if (NULL == cstr) { 
    static const char s[] = "NULL"; 
    write(file_des, s, sizeof(s) - 1); 
    return sizeof(s) - 1; 
  }; 
  
  const char * p = cstr; 
  for (;;) { if (*p == '\0') break; p++; }; 
  const int len = p - cstr; 
  write(file_des, cstr, len); 
  return len; 
}; 

static int write_string2(const int file_des, const char * cstr1, const char * cstr2) { 
  if (NULL == cstr1) return write_string(file_des, cstr2); 
  if (NULL == cstr2) return write_string(file_des, cstr1); 
  const int len1 = write_string(file_des, cstr1); 
  const int len2 = write_string(file_des, cstr2); 
  return len1 + len2; 
}; 

static int write_string3(const int file_des, const char * cstr1, const char * cstr2, const char * cstr3) { 
  if (NULL == cstr3) return write_string2(file_des, cstr1, cstr2); 
  const int len1 = write_string2(file_des, cstr1, cstr2); 
  const int len2 = write_string(file_des, cstr3); 
  return len1 + len2; 
}; 

static int write_string4(const int file_des, const char * cstr1, const char * cstr2, const char * cstr3, const char * cstr4) { 
  if (NULL == cstr4) return write_string3(file_des, cstr1, cstr2, cstr3); 
  const int len1 = write_string3(file_des, cstr1, cstr2, cstr3); 
  const int len2 = write_string(file_des, cstr4); 
  return len1 + len2; 
}; 

static int write_string5(const int file_des, const char * cstr1, const char * cstr2, const char * cstr3, const char * cstr4, const char * cstr5) { 
  if (NULL == cstr5) return write_string4(file_des, cstr1, cstr2, cstr3, cstr4); 
  const int len1 = write_string4(file_des, cstr1, cstr2, cstr3, cstr4); 
  const int len2 = write_string(file_des, cstr5); 
  return len1 + len2; 
}; 

static int write_string_ln(const int file_des, const char * cstr) { 
  const int len1 = write_string(file_des, cstr); 
  const int len2 = write_eol(file_des); 
  return len1 + len2; 
}; 

static int write_string2_ln(const int file_des, const char * cstr1, const char * cstr2) { 
  const int len1 = write_string2(file_des, cstr1, cstr2); 
  const int len2 = write_eol(file_des); 
  return len1 + len2; 
}; 

static int write_string3_ln(const int file_des, const char * cstr1, const char * cstr2, const char * cstr3) { 
  const int len1 = write_string3(file_des, cstr1, cstr2, cstr3); 
  const int len2 = write_eol(file_des); 
  return len1 + len2; 
}; 

static int write_string4_ln(const int file_des, const char * cstr1, const char * cstr2, const char * cstr3, const char * cstr4) { 
  const int len1 = write_string4(file_des, cstr1, cstr2, cstr3, cstr4); 
  const int len2 = write_eol(file_des); 
  return len1 + len2; 
}; 




// =================================================================================================== 
// WRITE_LLINT 

#define LOG10_OF_2_AS_MACRO  0.301029995663981195213738894724493026768189881462108541310427461127108189274424509486927252118186172040684
// log10(256) = log10(2^8) = 8 * log10(2) = 8 * 0.301029… = 2.408239968… ≤ 2.5 
// => sizeof(n) * log10(256) ≤ 2.5 x sizeof(n) 

enum { WRITE_LONG_LONG_INT_BUFFER__BYTESIZE_MIN = (((sizeof(long long int)) << 1) + ((sizeof(long long int)) >> 1) + 1 + 1) }; 

static void bytecopy(const char * byte_src, char * byte_dest, const int bytesize); 

static int /*nb_bytes_written*/ write_long_long_int_into_buffer(char * buffer, const int buffer_bytesize, long long int n) { 
  goto label__body; 
  
 label__error_buffer_empty: { 
    //write(STDERR_FILENO, "EMPTY", 5); 
    return -1; 
  }; 
  
 label__error_buffer_too_small: { 
    //write(STDERR_FILENO, "SMALL", 5); 
    return -2; 
  }; 
  
 label__body: { 
    if (0 >= buffer_bytesize) goto label__error_buffer_empty; 
    
    if (1 >= buffer_bytesize) goto label__error_buffer_too_small; 
    
    if (0 == n) { *buffer = '0'; *(buffer+1) = '\0'; return 2; }; 
    
    const int8_t neg_huh = (n < 0); 
    if (neg_huh) { 
      if (0 != (n << 1)) { 
	n = -n; 
      }
      else { 
	// RL: -INT_MIN est plus grand que INT_MAX. 
	static const char n_string8[] = "-128";
	static const char n_string16[] = "-32768";
	static const char n_string32[] = "-2147483648";
	static const char n_string64[] = "-9223372036854775808";
	const char * n_string = (1 == sizeof(long long int) ? n_string8 : 2 == sizeof(long long int) ? n_string16 : 4 == sizeof(long long int) ? n_string32 : 8 == sizeof(long long int) ? n_string64 : NULL); 
	return 1 + strlcpy(buffer, n_string, buffer_bytesize); 
      };
    };
    
    char * p; 
    p = buffer + buffer_bytesize; 
    
    p--; 
    *p = '\0'; 
    
    p--; 
    for (;;) { 
      *p = '0' + (n % 10); 
      n /= 10; 
      if (0 == n) break; 
      if (p == buffer) { goto label__error_buffer_too_small; }; 
      p--; 
    }; 
    
    if (neg_huh) { 
      if (p == buffer) { goto label__error_buffer_too_small; }; 
      p--; 
      *p = '-'; 
    }; 
    
    const int bytecopied = (buffer + buffer_bytesize) - p; 
    
    // Rotate to the front; 
    //const int shift_bytesize = p - buffer; 
    //bytecopy(p, buffer, shift_bytesize); 
    if (p != buffer) { 
      bytecopy(p, buffer, bytecopied); 
    }; 
    return bytecopied; 
  }; 
}; 


#define write_llint write_long_long_int
static int write_long_long_int(const int file_des, long long int n) { 
  char buffer[WRITE_LONG_LONG_INT_BUFFER__BYTESIZE_MIN]; 
  const int written_bytesize = write_long_long_int_into_buffer(buffer, sizeof(buffer),  n); 
  
  if (0 >= written_bytesize) return written_bytesize; 
  
  // removing last '\0' 
  const int len = written_bytesize - 1; 
  const char last_char = buffer[len]; 
  if ('\0' == last_char) { 
    write(file_des, buffer, len); 
    return len; 
  } 
  else { 
    write(file_des, buffer, written_bytesize); 
    return written_bytesize; 
  }; 
}; 

static int write_long_long_int_ln(const int file_des, const long long int n) { 
  const int len1 = write_long_long_int(file_des, n); 
  const int len2 = write_eol(file_des); 
  return len1 + len2; 
}; 

#define write_long_long_int_eol write_long_long_int_ln


// =================================================================================================== 
// DPUT  

static int dputc(const int fd, const char c) {
  return write(fd, &c, 1); 
}; 

#define dputs    write_string
#define dput_eol write_eol
#define dputn    write_llint 
#define dputs2   write_string2
#define dputs3   write_string3
#define dputs4   write_string4
#define dputs5   write_string5

static int dputc_rep(const int fd, const int8_t rep_n, const char c) {
  if (rep_n <= 0) return 0; 
  enum { tab_bytesize = 4096 }; 
  char tab[tab_bytesize]; 
  memset(tab, c, tab_bytesize); 
  
  int8_t left = rep_n; 
  int bytes_written_nb = 0; 
  for (;;) { 
    if (0 == left) break; 
    if (((ssize_t) tab_bytesize) < ((ssize_t) left)) { 
      bytes_written_nb += write(fd, tab, tab_bytesize); 
      left -= tab_bytesize; 
      continue; 
    }; 
    bytes_written_nb += write(fd, tab, left); 
    left = 0; 
    break; 
  }; 

  return bytes_written_nb; 
}; 

static int dput_spaces(const int fd, const int nb_spaces) {
  return dputc_rep(fd, nb_spaces, ' '); 
}; 

static int dputs_array__(const int out_stream, const int nb, const char * cstr_array[]) { 
  int written = 0; 
  for (int i = 0; i < nb; i++) { 
    const char * cstr = cstr_array[i]; 
    if (NULL !=  cstr) continue; 
    if ('\0' != *cstr) continue; 
    written += write(out_stream, cstr, strlen(cstr)); 
  }; 
  return written; 
}; 
 
#if 1 
#define dputs_array(out_stream,...) (dputs_array__((out_stream),ARRAY_SIZE(((const char * []) { __VA_ARGS__ } )), ((const char * []) { __VA_ARGS__ } )))
#endif 



// =================================================================================================== 
// ??? 

#ifndef __bool_true_false_are_defined /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdbool.h.html */ 
enum { true  = (0 == 0) }; 
enum { false = (0 != 0) }; 
#  define __bool_true_false_are_defined 1
#endif 


static void bytecopy(const char * byte_src, char * byte_dest, const int bytesize) { 
  for (int i = 0; i < bytesize; i++) { 
    *byte_dest = *byte_src; 
    byte_dest++; 
    byte_src++; 
  }; 
}; 

static int bytecompare_prefix(const char * buffer1, const int16_t buffer1_bytesize, const char * buffer2, const int16_t buffer2_bytesize, const int16_t prefix_bytesize) { 
  if (0 >= prefix_bytesize) return true; 
  if (buffer1_bytesize < prefix_bytesize) return false; 
  if (buffer2_bytesize < prefix_bytesize) return false; 
  
  for (int16_t i = 0; i < prefix_bytesize; i++) { 
    if (buffer1[i] != buffer2[i]) return false; 
  }; 
  
  return true; 
}; 

static int bytecompare__token_contains_prefix_huh(const char * token_buffer, const int16_t token_buffer_bytesize, const char * prefix_buffer, const int16_t prefix_buffer_bytesize) { 
  if (0 >= prefix_buffer_bytesize) return true; 
  if (token_buffer_bytesize < prefix_buffer_bytesize) return false; 
  
  for (int16_t i = 0; i < prefix_buffer_bytesize; i++) { 
    if (token_buffer[i] != prefix_buffer[i]) return false; 
  }; 
  
  return true; 
}; 

static int cstrlen(const char * cstr) { 
  if (cstr == NULL) return -1; 
  const char * p = cstr; 
  for (;;) { if (*p == '\0') break; p++; }; 
  const int len = p - cstr; 
  return len;
}; 

static int stringcopy(const char * string0_src, char * byte_dest, const int dest_bytesize) { 
  const char * p = string0_src; 
  char * q = byte_dest; 
  int available_bytes = dest_bytesize; 
  if (0 >= available_bytes) return 0; 
  goto label__body; 
  
  label__exit: { 
    *q = '\0';  
    return dest_bytesize - available_bytes; 
  }; 
  
  label__body: { 
    for (;;) { 
      if (0 == available_bytes) goto label__exit; 
      const char c = *p; 
      *q = c; 
      available_bytes--; 
      if ('\0' == c) goto label__exit; 
      p++; 
      q++; 
    }; 
  }; 
  
}; 

static int cstring_compare__token_contains_prefix_huh(const char * token_cstr, const char * prefix_cstr) { 
  const int16_t token_buffer_bytesize = cstrlen(token_cstr); 
  const int16_t prefix_buffer_bytesize = cstrlen(prefix_cstr); 
  return bytecompare__token_contains_prefix_huh(token_cstr, token_buffer_bytesize, prefix_cstr, prefix_buffer_bytesize); 
}; 

static int cstring__equal_huh(const char * cstr1, const char * cstr2) { 
  if (cstr1 == cstr2) return true; 
  if (NULL == cstr1) return false; 
  if (NULL == cstr2) return false; 
  const char *p = cstr1; 
  const char *q = cstr2; 
  for (;;) { 
    if (*p != *q) return false; 
    if ('\0' == *p) return true; 
    p++; 
    q++; 
  };
  /* NOT REACHED */
}; 








// =================================================================================================== 
// LEXER TOOLS 

static int16_t lookup_newline_char(const char * buffer, const int16_t buffer_bytesize, const int16_t start_pos) { 
  if (0 > buffer_bytesize) return -3; 
  if (0 == buffer_bytesize) return -2; 
  int16_t current_index; 
  for (int16_t current_index = start_pos; current_index < buffer_bytesize; current_index++) { 
    if ('\n' == buffer[current_index]) return current_index; 
  }; 
  return -1; 
}; 


static int16_t llint__token_get_number_prefix_bytesize(const char * token, int8_t * retval__roundup_huh) { 
  int16_t prefix_bytesize = -1; 
  int8_t roundup_huh = false; 
  const char * token_given = token; 
  goto label__body; 
  
 label__exit: { 
    if (-1 == prefix_bytesize) prefix_bytesize = (token - token_given); 
    if (NULL != retval__roundup_huh) *retval__roundup_huh = roundup_huh; 
    return prefix_bytesize; 
  }; 
  
 label__body: { 
    if (NULL == token) goto label__exit; 
    char c = *token; 
    if ('\0' == c) goto label__exit; 
    if ('-'  == c) { token++, c = *token; }; 
    for (;;token++, c = *token) { 
      if (c >= '0' && c <= '9') continue; 
      break; 
    }; 
    
    if (c == '\0') goto label__exit; 
    
    for (;;) { 
      if (c ==  '.') break; 
      if (c ==  ',') break; 
      goto label__exit; 
    }; 
    
    c = *(token+1); 
    roundup_huh = (c >= '5' && c <= '9'); 
    goto label__exit; 
  }; 
  
}; 


static int char_array0__number_huh(const char * token) { 
  if (NULL == token) return false; 
  char c = *token; 
  if ('\0' == c) return false; 
  if ('-'  == c) { token++, c = *token; }; 
  for (;;token++, c = *token) { 
    if (c >= '0' && c <= '9') continue; 
    break; 
  }; 
  return (c == '\0'); 
}; 

static int char_array0__number_type(const char * token, int * retval__int_bytesize) { 
  char int_bytesize = -1; 
  int retval = 0; 
  const char * token_argv = token; 
  goto label__start; 

  label__exit: { 
    if (-1 == int_bytesize) int_bytesize = (token - token_argv); 
    if (NULL != retval__int_bytesize) *retval__int_bytesize = int_bytesize; 
    return retval; 
  }; 
  
 label__start: {}; 
  if (NULL == token) { retval = 1; goto label__exit; }; 
  char c = *token; 
  if ('\0' == c) { retval = 2; goto label__exit; }; 
  if ('-'  == c) { token++, c = *token; }; 
  for (;;token++, c = *token) { 
    if (c >= '0' && c <= '9') continue; 
    break; 
  }; 
  
  if (c == '\0') { retval = 3; goto label__exit; }; 
  
  if (*(token+1) == '\0') { 
    if (c == '\n') { retval = 6; goto label__exit; }; 
    if (c ==  '.') { retval = 4; goto label__exit; }; 
    if (c ==  ',') { retval = 4; goto label__exit; }; 
    /* ELSE */     { retval = 5; goto label__exit; }; 
  }; 
  
  if (c == '.') { 
    c = *(1+token); 
    if (c >= '0' && c <= '4') { retval = 4; goto label__exit; }; 
    if (c >= '5' && c <= '9') { retval = 7; goto label__exit; }; 
    /* ELSE */                { retval = 5; goto label__exit; }; 
  }; 
  
  assert(false); 
}; 

static long long int convert_buffer_to_long_long_int(const char * buffer, const uint16_t buffer_bytesize) { 
  if (buffer_bytesize <= 0) return 0; 
  long long int new_value = 0; 
  const int8_t negative_huh = *buffer == '-'; 
  
  uint16_t current_pos = 0; 
  if (negative_huh) current_pos++; 
  
  for (;current_pos < buffer_bytesize; current_pos++) { 
    const char c = buffer[current_pos]; 
    new_value *= 10; 
    new_value += (c - '0'); 
  }; 

  if (negative_huh) new_value = -new_value; 
  
  return new_value; 
}; 









#endif /* LIB__09__WRITE_STRING_CI */
