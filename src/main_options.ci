// =================================================================================================== 
// MAIN OPTIONS 
 
enum {
  PROGRAM_OPTIONS_INDEX__VERSION, 
  PROGRAM_OPTIONS_INDEX__COPYRIGHT, 
  PROGRAM_OPTIONS_INDEX__COPYRIGHT_CSTR, 
  PROGRAM_OPTIONS_INDEX__COPYRIGHT_CCOMMENT, 
  PROGRAM_OPTIONS_INDEX__COPYRIGHT_SHELL_COMMENT, 
  PROGRAM_OPTIONS_INDEX__COPYRIGHT_SLASH_COMMENT, 
  PROGRAM_OPTIONS_INDEX__LICENCE, 
  PROGRAM_OPTIONS_INDEX__HELP, 
  PROGRAM_OPTIONS_INDEX__VERBOSE_LEVEL, 
  PROGRAM_OPTIONS_INDEX__STDLOG, 
  PROGRAM_OPTIONS_INDEX__STDUSER, 
  PROGRAM_OPTIONS_INDEX__PRINT, 
  PROGRAM_OPTIONS_INDEX__URL, 
  PROGRAM_OPTIONS_INDEX__EXAMPLE, 
  PROGRAM_OPTIONS_INDEX__QUIET, 
  PROGRAM_OPTIONS_INDEX__DUMP, 
  PROGRAM_OPTIONS_INDEX__RESTORE, 
  PROGRAM_OPTIONS_INDEX__LIMITS, 
  PROGRAM_OPTIONS_INDEX__LANG, 
  PROGRAM_OPTIONS_INDEX__LANG_LIST, 
  PROGRAM_OPTIONS_INDEX__HELP_SRC, 
  PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T, 
  PROGRAM_OPTIONS_INDEX__COUNT, 
}; 
 
static       uint8_t program_options[PROGRAM_OPTIONS_INDEX__COUNT] = {}; 
enum {               PROGRAM_OPTIONS__ARGC_MAX = 64 }; 
static       int     program_options__unknown[PROGRAM_OPTIONS__ARGC_MAX] = {}; 
static       int     program_options__unknown__nb = 0; 
static       int     program_options__plain[PROGRAM_OPTIONS__ARGC_MAX] = {}; 
static       int     program_options__plain__nb = 0; 
//static const char *  program_options__value[PROGRAM_OPTIONS__ARGC_MAX] = {}; 
static const char *  program_options__stdlog_new_output = NULL; 
static const char *  program_options__stduser_new_output = NULL; 
static const char *  program_options__lang = NULL; 

static void program_options__unknown__push(const int argc) { 
  assert(program_options__unknown__nb < PROGRAM_OPTIONS__ARGC_MAX); 
  program_options__unknown[program_options__unknown__nb] = argc; 
  program_options__unknown__nb++; 
}; 

static void program_options__plain__push(const int argc) { 
  assert(program_options__plain__nb < PROGRAM_OPTIONS__ARGC_MAX); 
  program_options__plain[program_options__plain__nb] = argc; 
  program_options__plain__nb++; 
}; 

#if 0 
static void program_options__value__set(const int arg_i, const char * arg_value) { 
  assert(arg_i < PROGRAM_OPTIONS__ARGC_MAX); 
  program_options__value[arg_i] = arg_value; 
}; 
#endif 


static void program_options__bzero(void) {
  { 
    uint8_t * p = program_options; 
    for (int i = 0; i < PROGRAM_OPTIONS_INDEX__COUNT; i++) { 
      *p = 0; 
      p++; 
    }; 
  };
};



static int program_options__parse(const int argc, const char * argv[]) {
  program_options__bzero();
  program_options__unknown__nb = 0; 
  program_options__plain__nb   = 0; 
  const char * * p = argv;
  for (int i = 1;; i++) { 
    p++; 
    const char * s = *p;
    if (NULL ==  s) { break; }; 
    if ('\0' == *s) { continue; }; 
    if ('-'  != *s) { program_options__plain__push(i); continue; }; 
    s++; 
    if ('\0' == *s) { program_options__plain__push(i); continue; }; 
    if (('-' == *s) && ('\0' == *(s+1))) { 
      for (;;) { i++; if (i == argc) break; program_options__plain__push(i); }; 
      break; 
    }; 
    if ('-'  != *s) { 
      for (;;) { 
	switch (*s) { 
	 case '?': program_options[PROGRAM_OPTIONS_INDEX__HELP         ]++; break; 
	 case 'h': program_options[PROGRAM_OPTIONS_INDEX__HELP         ]++; break; 
	 case 'v': program_options[PROGRAM_OPTIONS_INDEX__VERBOSE_LEVEL]++; break; 
         case 'V': program_options[PROGRAM_OPTIONS_INDEX__VERSION      ]++; break; 
         case 'q': program_options[PROGRAM_OPTIONS_INDEX__QUIET        ]++; break; 
         case 'p': program_options[PROGRAM_OPTIONS_INDEX__PRINT        ]++; break; 
         default : program_options__unknown__push(i); break; // RL: TODO FIXME XXX: Find a way to get that unrecognized letter. 
	}; 
	s++; 
	if ('\0' == *s) { break; }; 
      }; 
      continue; 
    }; 
    s++;
    if (0 == strcasecmp(s, "help"                   )) { program_options[PROGRAM_OPTIONS_INDEX__HELP                   ]++; continue; }; 
    if (0 == strcasecmp(s, "usage"                  )) { program_options[PROGRAM_OPTIONS_INDEX__HELP                   ]++; continue; }; 
    if (0 == strcasecmp(s, "help-src"               )) { program_options[PROGRAM_OPTIONS_INDEX__HELP_SRC               ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright"              )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT              ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-cstr"         )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CSTR         ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-c-str"        )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CSTR         ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-c_str"        )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CSTR         ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-ccomment"     )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CCOMMENT     ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-c-comment"    )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CCOMMENT     ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-c_comment"    )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CCOMMENT     ]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-shell-comment")) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SHELL_COMMENT]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-shell_comment")) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SHELL_COMMENT]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-slash-comment")) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SLASH_COMMENT]++; continue; }; 
    if (0 == strcasecmp(s, "copyright-slash_comment")) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SLASH_COMMENT]++; continue; }; 
    if (0 == strcasecmp(s, "license"                )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT              ]++; continue; }; 
    if (0 == strcasecmp(s, "licence"                )) { program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT              ]++; continue; }; 
    if (0 == strcasecmp(s, "verbose"                )) { program_options[PROGRAM_OPTIONS_INDEX__VERBOSE_LEVEL          ]++; continue; }; 
    if (0 == strcasecmp(s, "version"                )) { program_options[PROGRAM_OPTIONS_INDEX__VERSION                ]++; continue; }; 
    if (0 == strcasecmp(s, "example"                )) { program_options[PROGRAM_OPTIONS_INDEX__EXAMPLE                ]++; continue; }; 
    if (0 == strcasecmp(s, "exemple"                )) { program_options[PROGRAM_OPTIONS_INDEX__EXAMPLE                ]++; continue; }; 
    if (0 == strcasecmp(s, "quiet"                  )) { program_options[PROGRAM_OPTIONS_INDEX__QUIET                  ]++; continue; }; 
    if (0 == strcasecmp(s, "mute"                   )) { program_options[PROGRAM_OPTIONS_INDEX__QUIET                  ]++; continue; }; 
    if (0 == strcasecmp(s, "print"                  )) { program_options[PROGRAM_OPTIONS_INDEX__PRINT                  ]++; continue; }; 
    if (0 == strcasecmp(s, "url"                    )) { program_options[PROGRAM_OPTIONS_INDEX__URL                    ]++; continue; }; 
    if (0 == strcasecmp(s, "stdlog"                 )) { program_options[PROGRAM_OPTIONS_INDEX__STDLOG                 ]++; 
      p++; 
      if (*p == NULL) return false; 
#if 1 
      program_options__stdlog_new_output = *p; 
#else 
      program_options__value__set(i, *p); 
#endif 
      i++; 
      continue; 
    }; 
    if (0 == strcasecmp(s, "stduser"                )) { program_options[PROGRAM_OPTIONS_INDEX__STDUSER                ]++; 
      p++; 
      if (*p == NULL) return false; 
      program_options__stduser_new_output = *p; 
      i++; 
      continue; 
    };

    if (0 == strcasecmp(s, "size-of-anime-t"     )) { program_options[PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T           ]++; continue; }; 
    if (0 == strcasecmp(s, "sizeof-anime-t"      )) { program_options[PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T           ]++; continue; }; 
    if (0 == strcasecmp(s, "size-of-anime"       )) { program_options[PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T           ]++; continue; }; 
    if (0 == strcasecmp(s, "sizeof-anime"        )) { program_options[PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T           ]++; continue; }; 
    if (0 == strcasecmp(s, "lang-list"           )) { program_options[PROGRAM_OPTIONS_INDEX__LANG_LIST                 ]++; continue; }; 
    if (0 == strcasecmp(s, "lang"                )) { program_options[PROGRAM_OPTIONS_INDEX__LANG                      ]++; 
      p++; 
      if (*p == NULL) return false; 
      program_options__lang = *p; 
      i++; 
      continue; 
    };
    if (0 == strcasecmp(s, "dump"                   )) { program_options[PROGRAM_OPTIONS_INDEX__DUMP                   ]++; continue; }; 
    if (0 == strcasecmp(s, "restore"                )) { program_options[PROGRAM_OPTIONS_INDEX__RESTORE                ]++; continue; };  
    if (0 == strcasecmp(s, "limits"                 )) { program_options[PROGRAM_OPTIONS_INDEX__LIMITS                 ]++; continue; };  
    if (0 == strcasecmp(s, "limites"                )) { program_options[PROGRAM_OPTIONS_INDEX__LIMITS                 ]++; continue; };  
    program_options__unknown__push(i); 
    continue; 
  }; 
  return true; 
}; 

static void main__usage(const int argc, const char * argv[], const int stduser_d) { 
  //fprintf(stderr, "%s <infile> " "\n", argv[0]); 
  //fprintf(stderr, "\t <infile> can be a filename or '-' for stdin" "\n", argv[0]); 
  //dputs(stduser_d, program_description); 
  dputs_array(stduser_d, argv[0], ": ", "Check if an anime description file is properly written." "\n"); 
  dputs_array(stduser_d, "Usage: ", argv[0], " [<options>] <infile> [<field name>] " "\n" ); 
  dputs(stduser_d, "  " "<infile> can be a filename or '-' for stdin (use './-' for a file named '-')" "\n"); 
  dputs(stduser_d, "  " "If one <field name> or more are provided, print the value of the matching fields." "\n"); 
  dputs(stduser_d, "Options:" "\n"); 
  dputs(stduser_d, "  " "-h,-?,--help,--usage               " "  \t  " "Display this help" "\n"); 
  dputs(stduser_d, "  " "--copyright,--license,--licence    " "  \t  " "Display the program license" "\n"); 
  dputs(stduser_d, "  " "--copyright-cstr                   " "  \t  " "Display the program license as a C string" "\n"); 
  dputs(stduser_d, "  " "--copyright-ccomment               " "  \t  " "Display the program license as a C comment" "\n"); 
  dputs(stduser_d, "  " "--copyright-shell_comment          " "  \t  " "Display the program license as a SHELL comment" "\n"); 
  dputs(stduser_d, "  " "--copyright-slash_comment          " "  \t  " "Display the program license as a double-slash comment" "\n"); 
  dputs(stduser_d, "  " "-v,--verbose                       " "  \t  " "Increase verbosity" "\n"); 
  dputs(stduser_d, "  " "-q,--quiet,--mute                  " "  \t  " "Do not say anything" "\n"); 
  dputs(stduser_d, "  " "-p,--print                         " "  \t  " "Print the computed structure" "\n"); 
  dputs(stduser_d, "  " "-V,--version                       " "  \t  " "Print program version" "\n"); 
  dputs(stduser_d, "  " "--example,--exemple                " "  \t  " "Print an example" "\n"); 
  dputs(stduser_d, "  " "--url                              " "  \t  " "Print url" "\n"); 
  dputs(stduser_d, "  " "--stduser <file>                   " "  \t  " "Redirect all the talk to the user to <file>. (Default is stderr.) (Use 'stdout', 'stderr', and 'stdnull' to redirect to stdout, stderr, and /dev/null.)" "\n"); 
  dputs(stduser_d, "  " "--stdlog <file>                    " "  \t  " "Write stdlog to <file>. (By default, stdlog fd is 3; therefore the output of stdlog can be gotten using '3>&2' or '3>./stdlog.txt'.) (stdlog is intended for dev. But can be read by users.) (Use 'stdout', 'stderr', and 'stdnull' to redirect to stdout, stderr, and /dev/null.)" "\n"); 
  dputs(stduser_d, "  " "--dump                             " "  \t  " "Dump the datacode" "\n"); 
  dputs(stduser_d, "  " "--restore                          " "  \t  " "Input file is datacode" "\n"); 
  dputs(stduser_d, "  " "--limits,--limites                 " "  \t  " "Print program limitations" "\n"); 
  dputs(stduser_d, "  " "--lang <lang>                      " "  \t  " "Change la langue du programme" "\n"); 
  dputs(stduser_d, "  " "--lang-list                        " "  \t  " "Liste les langues du programme" "\n"); 
  dputs(stduser_d, "  " "--help-src                         " "  \t  " "Décrit la structure et l'architecture du programme source" "\n"); 
  dputs(stduser_d, "  " "--size-of-anime-t,--sizeof-anime-t " "  \t  " "Affiche la taille en octets de la structure de données anime_t" "\n"); 
  dputs(stduser_d, "  " "--size-of-anime,--sizeof-anime     " "  \t  " "" "\n"); 
}; 

static void main__help_src(const int argc, const char * argv[], const int stduser_d) { 
  dputs_array(stduser_d, "[ ", argv[0], "] -- ", "LIB ANIME" "\n"); 
  dputs_array(stduser_d, "Le code source du programme est ainsi structuré: " "\n"); 

  static const char structure_du_code_source[] = 
    "FRA <RL>" "\n"
    "Ce module est le point d'entrée du programme. " "\n"
    "Il est le coordonnateur entre les sous-modules. " "\n"
    "Lui-même ne calcule rien. " "\n"
    "Les autres modules sont le traitement pendant que il est la commande. " "\n"
    "" "\n"
    "anime_module.h est vide puisque: " "\n"
    " - Il n'est le sous-module d'aucun module. " "\n"
    "   Donc il n'exporte aucune fonction à un sur-module. " "\n"
    " - Il n'exporte que les fonctions exportées dans la bibliothèque, " "\n"
    "   c'est-à-dire celles déclarées dans anime.h. " "\n"
    "" "\n"
    "Pour les sous-modules, les fonctions exportées par les sous-modules sont les " "\n"
    "fonctions utilisées par le module coordinateur. " "\n"
    "" "\n"
    "Les sous-modules: " "\n"
    " - anime_lexer_module.c " "\n"
    " - anime_syntax_module.c " "\n"
    " - anime_generation_module.c " "\n"
    "" "\n"
    "Le sous-module anime_lexer_module.c procède à l'analyse lexicale:" "\n"
    " - celui-là recompose le fichier de description (une suite de caractères) " "\n"
    "   en unités lexicales (lexèmes, tokens), c'est-à-dire manipulable " "\n"
    "   par l'analyseur de structure. " "\n"
    "" "\n"
    "Le sous-module anime_syntax_module.c procède à l'analyse syntaxique:" "\n"
    " - Celui-là vérifie la structure du fichier de description." "\n"
    "   Celui-ci est-il correctement structuré? " "\n"
    "   Celui-ci est-il correctement écrit? " "\n"
    " - Techniquement, du fait des expressions infixes pouvant avoir un nombre arbitraire " "\n"
    "   de sous-expressions, il s'agit de la partie la plus complexe. " "\n"
    "   (Interdire les sous-expressions réduirait considérablement la complexité.) " "\n"
    "" "\n"
    "Le sous-module anime_generation_module.c procède à l'évaluation et au remplissage de la structure de données:" "\n"
    " - Rien à ajouter. " "\n"
    "" "\n"
    "Chaque sous-module est composé de sous-fichiers." "\n"
    "Chacun sont directement inclus dans le sous-module:" "\n"
    " - Les fichiers hi et les fichier ci." "\n"
    "" "\n"
    "Également, il existe le module \"main.c\" pour le programmen indépendant " "\n"
    "d'analyse et de vérification d'un fichier de description. " "\n"
    "Ce module est indépendant de la bibliothèque: " "\n"
    " - Celui-là n'inclut que le fichier anime.h. " "\n"
    " - Après la compilation, il est lié à la bibliothèque anime.a. " "\n"
    "" "\n"
    "Aussi, il y a le fichier \"anime_global.h\". " "\n"
    "Celui-ci est juste un fichier de convenance, pour éviter les répétitions." "\n"
    "(Il pourrait être renommé \"global.h\"? Ou \"common_headers.h\"?) " "\n"
    "Il ne devrait pas y avoir de \"anime_gloabl.c\"" "\n"
    "" "\n"
    "Enfin, il y a les bibliothèques communes: lib*.ci." "\n"
    ; 

  dputs(stduser_d, structure_du_code_source); 
};

static void main__lang_list(const int argc, const char * argv[], const int stduser_d) { 
  dputs_array(stduser_d, "[ ", argv[0], "] -- ", "LIB ANIME" "\n"); 
  dputs_array(stduser_d, "Je comprends les langues suivantes: " "\n"); 
  dputs_array(stduser_d, "AGENDA TOTO XXX FIXME" "\n"); 
};

static void main__print_sizeof_anime_t(const int argc, const char * argv[], const int stduser_d) { 
  dputn_eol(stduser_d, anime_t_sizeof); 
};

static void main__limites(const int argc, const char * argv[], const int stduser_d) { 
  LOCAL_ALLOCA__DECLARE(int16_t,INT16_MAX); 
  dputs_array(stduser_d, "[ ", argv[0], "] -- ", "LIB ANIME" "\n"); 
  dputs_array(stduser_d, "Les limites majeures du programme sont les suivantes: " "\n"); 
  dputs_array(stduser_d, " - Taille maximale d'une ligne: ", int_string(ANIME_LINE_LEN_MAX), " (variable ", STRINGIFY(ANIME_LINE_LEN_MAX), ")", "\n"); 
  dputs_array(stduser_d, "    * Note: Cette limite implique que un lexème ne peut pas être plus long que ", int_string(ANIME_LINE_LEN_MAX), " caractères.", "\n"); 
  dputs_array(stduser_d, "    * Note: Un lexème ne peut être à cheval sur deux lignes." "\n"); 
  dputs_array(stduser_d, "    * Note: Cette taille comprend les caractères de fin de ligne (LF ou CR LF) et le caractère terminal nul." "\n"); 
  dputs_array(stduser_d, " - La profondeur maximale d'une expression (sous-expressions imbriquées) est de ", int_string(ANIME__EXPRESSION_NESTEDNESS_MAX), " (variable ANIME__EXPRESSION_NESTEDNESS_MAX)", "\n"); 
  dputs_array(stduser_d, " - La longueur (en lexèmes) maximale d'une expression est de ", int_string(ANIME__LONGEST_INFIX_EXPRESSION), " (variable ANIME__LONGEST_INFIX_EXPRESSION)" "\n"); 
  dputs_array(stduser_d, "" "\n"); 
  dputs_array(stduser_d, "Autres:" "\n"); 
  dputs_array(stduser_d, " - Il y a de nombreuses limites mineures dans le programme. Normalement, celles-ci dépendent des précédentes et sont dimensionnées en proportion." "\n"); 
  dputs_array(stduser_d, " - Par ailleurs, le programme est concu afin d'être compilable sur un processeur seize bits: tous les entiers sont seize bits." "\n"); 
  dputs_array(stduser_d, " - Également, les décimaux sont de taille trente-deux bits. (sizeof(float) = ", int_string((sizeof(float)) << 3), ")", "\n"); 
  dputs_array(stduser_d, "" "\n"); 
  dputs_array(stduser_d, "Toutes ces limites sont modifiables. Mais il faut recompiler." "\n"); 
};

static int program_options__run(const int argc, const char * argv[], const int stdprint_d, const int stduser_d, const int stdlog_d) { 
  if (0 != program_options__unknown__nb) { 
    for (int i = 0; i < program_options__unknown__nb; i++) { 
      dputs(stduser_d, "Unknown option: "); 
      dputs(stduser_d, "argv["); 
      dputn(stduser_d, program_options__unknown[i]); 
      dputs(stduser_d, "]: "); 
      dputs(stduser_d, argv[program_options__unknown[i]]); 
      dputs(stduser_d, "\n"); 
    }; 
    return ANIME__MAIN__OPTIONS__UNKNOWN; 
  }; 
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__LIMITS]) { 
    main__limites(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__SIZE_OF_ANIME_T]) { 
    main__print_sizeof_anime_t(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__LANG_LIST]) { 
    main__lang_list(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__HELP_SRC]) { 
    main__help_src(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__HELP]) { 
    main__usage(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__VERSION]) {
    anime_version__print(stdprint_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__EXAMPLE]) {
    anime_example__print(stdprint_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT]) {
    anime_copyright__print(stdprint_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };

  if (0 != program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CSTR]) {
    const char * p = anime_copyright; 
    dputs(stdprint_d, "\""); 
    int i = 0; 
    for (;;) { 
      if (*p == '\0') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, "\" \"\\n\" \n"); 
	break; 
      }; 
      if (*p == '\n') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, "\" \"\\n\" \n\""); 
	i = 0; 
	p++; 
	continue; 
      }; 
      dputc(stdprint_d, *p); 
      i++; 
      p++; 
    }; 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  }; 
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_CCOMMENT]) {
    const char * p = anime_copyright; 
    dputs(stdprint_d, "/* "); 
    int i = 0; 
    for (;;) { 
      if (*p == '\0') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " */\n"); 
	break; 
      }; 
      if (*p == '\n') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " */\n/* "); 
	i = 0; 
	p++; 
	continue; 
      }; 
      dputc(stdprint_d, *p); 
      i++; 
      p++; 
    }; 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  }; 
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SHELL_COMMENT]) {
    const char * p = anime_copyright; 
    dputs(stdprint_d, "# "); 
    int i = 0; 
    for (;;) { 
      if (*p == '\0') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " \n"); 
	break; 
      }; 
      if (*p == '\n') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " \n# "); 
	i = 0; 
	p++; 
	continue; 
      }; 
      dputc(stdprint_d, *p); 
      i++; 
      p++; 
    }; 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  }; 
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__COPYRIGHT_SLASH_COMMENT]) {
    const char * p = anime_copyright; 
    dputs(stdprint_d, "// "); 
    int i = 0; 
    for (;;) { 
      if (*p == '\0') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " \n"); 
	break; 
      }; 
      if (*p == '\n') {
	for (int j = i; j < 73; j++) { dputc(stdprint_d, ' '); }; 
	dputs(stdprint_d, " \n// "); 
	i = 0; 
	p++; 
	continue; 
      }; 
      dputc(stdprint_d, *p); 
      i++; 
      p++; 
    }; 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  }; 
  
  if (0 != program_options[PROGRAM_OPTIONS_INDEX__URL]) {
    anime_url__print(stdprint_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  };

  if (0 == program_options__plain__nb) { 
    main__usage(argc, argv, stduser_d); 
    return ANIME__MAIN__OPTIONS__EXIT_QUICK; 
  }; 
  
  return ANIME__OK; 
}; 
