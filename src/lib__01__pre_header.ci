#ifndef LIB__01__PRE_HEADER_CI
#define LIB__01__PRE_HEADER_CI

// RL: Les enum-s doivent être définis avant les macros, sinon des conflits se produisent. 
// RL: Or les enum-s sont bons à avoir pour en disposer dans le débugueur. 
// RL: En conséquence, ce fichier doit être inclu avant tout autre header. 
// RL: Ce fichier ne devrait contenir rien d’autre. 
// RL: Ce fichier devrait être aussi petit que possible. 



//#include <unistd.h> /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html */ /* https://en.wikipedia.org/wiki/Unistd.h */ 
//#ifndef __bool_true_false_are_defined /* https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdbool.h.html */ 
#ifndef false
enum { false = (0 != 0) }; 
enum { true = (0 == 0) }; 
#  define BOOL_MAX(a,b) (((a)>(b))?(a):(b)) 
#  define BOOL_ABS(a) (((a)>0)?(a):(-(a)))
enum { undecided_boolean = 1+BOOL_MAX(BOOL_ABS(false),BOOL_ABS(true)) }; 
#  undef BOOL_ABS
#  undef BOOL_MAX
#  define false false
#  define true true
#  define undecided_boolean undecided_boolean
enum { __bool_true_false_are_defined = 1 }; 
#  define __bool_true_false_are_defined __bool_true_false_are_defined
#endif



#ifndef INT8_MAX
//enum { INT8_MAX  = (1   <<  0) + (1   <<  1) + (1   <<  2) + (1   <<  3) + (1   <<  4) + (1   <<  5) + (1   <<  6) }; 
//enum { INT8_MAX  = ~(1   <<  7) }; // RL: Would be right on 8-bits integer. 
//enum { INT8_MAX  = -(1   <<  7) }; // RL: Would be wrong on 8-bits integer. 
enum { INT8_MAX  = (1   <<  0) + (1   <<  1) + (1   <<  2) + (1   <<  3) + (1   <<  4) + (1   <<  5) + (1   <<  6) }; 
//enum { INT8_MAX  = (1   <<  7) - 1 }; 
#endif 
#ifndef UINT8_MAX
//enum { UINT8_MAX  = (1   <<  0) + (1   <<  1) + (1   <<  2) + (1   <<  3) + (1   <<  4) + (1   <<  5) + (1   <<  6) + (1   <<  7) }; 
enum { UINT8_MAX  = INT8_MAX + (1   <<  7) }; 
#endif 
#ifndef INT16_MAX
enum { INT16_MAX = (1   <<  0) + (1   <<  1) + (1   <<  2) + (1   <<  3) + (1   <<  4) + (1   <<  5) + (1   <<  6) + (1   <<  7) + 
                   (1   <<  8) + (1   <<  9) + (1   << 10) + (1   << 11) + (1   << 12) + (1   << 13) + (1   << 14) }; 
#endif
#ifndef UINT16_MAX
enum { UINT16_MAX = INT16_MAX + (1   << 15) }; 
#endif
#ifndef INT24_MAX 
enum { INT24_MAX = (1L  <<  0) + (1L  <<  1) + (1L  <<  2) + (1L  <<  3) + (1L  <<  4) + (1L  <<  5) + (1L  <<  6) + (1L  <<  7) + 
                   (1L  <<  8) + (1L  <<  9) + (1L  << 10) + (1L  << 11) + (1L  << 12) + (1L  << 13) + (1L  << 14) + (1L  << 15) + 
                   (1L  << 16) + (1L  << 17) + (1L  << 18) + (1L  << 19) + (1L  << 20) + (1L  << 21) + (1L  << 22) }; 
#endif 
#ifndef UINT24_MAX 
/*enum { UINT24_MAX = (1L  <<  0) + (1L  <<  1) + (1L  <<  2) + (1L  <<  3) + (1L  <<  4) + (1L  <<  5) + (1L  <<  6) + (1L  <<  7) + 
                    (1L  <<  8) + (1L  <<  9) + (1L  << 10) + (1L  << 11) + (1L  << 12) + (1L  << 13) + (1L  << 14) + (1L  << 15) + 
                    (1L  << 16) + (1L  << 17) + (1L  << 18) + (1L  << 19) + (1L  << 20) + (1L  << 21) + (1L  << 22) + (1L  << 23) }; */
enum { UINT24_MAX = INT24_MAX + (1   << 23) }; 
#endif 
#ifndef INT32_MAX
enum { INT32_MAX = (1L  <<  0) + (1L  <<  1) + (1L  <<  2) + (1L  <<  3) + (1L  <<  4) + (1L  <<  5) + (1L  <<  6) + (1L  <<  7) + 
                   (1L  <<  8) + (1L  <<  9) + (1L  << 10) + (1L  << 11) + (1L  << 12) + (1L  << 13) + (1L  << 14) + (1L  << 15) + 
                   (1L  << 16) + (1L  << 17) + (1L  << 18) + (1L  << 19) + (1L  << 20) + (1L  << 21) + (1L  << 22) + (1L  << 23) + 
                   (1L  << 24) + (1L  << 25) + (1L  << 26) + (1L  << 27) + (1L  << 28) + (1L  << 29) + (1L  << 30) }; 
#endif 
#ifndef UINT32_MAX
enum { UINT32_MAX = INT32_MAX + (1L  << 31) }; 
#endif
#ifndef INT48_MAX
enum { INT48_MAX = (1LL <<  0) + (1LL <<  1) + (1LL <<  2) + (1LL <<  3) + (1LL <<  4) + (1LL <<  5) + (1LL <<  6) + (1LL <<  7) + 
                   (1LL <<  8) + (1LL <<  9) + (1LL << 10) + (1LL << 11) + (1LL << 12) + (1LL << 13) + (1LL << 14) + (1LL << 15) + 
                   (1LL << 16) + (1LL << 17) + (1LL << 18) + (1LL << 19) + (1LL << 20) + (1LL << 21) + (1LL << 22) + (1LL << 23) + 
                   (1LL << 24) + (1LL << 25) + (1LL << 26) + (1LL << 27) + (1LL << 28) + (1LL << 29) + (1LL << 30) + (1LL << 31) +  
                   (1LL << 32) + (1LL << 33) + (1LL << 34) + (1LL << 35) + (1LL << 36) + (1LL << 37) + (1LL << 38) + (1LL << 39) + 
                   (1LL << 40) + (1LL << 41) + (1LL << 42) + (1LL << 43) + (1LL << 44) + (1LL << 45) + (1LL << 46) }; 
#endif 
#ifndef UINT48_MAX
enum { UINT48_MAX = INT48_MAX + (1LL << 31) }; 
#endif
#ifndef INT64_MAX
enum { INT64_MAX = (1LL <<  0) + (1LL <<  1) + (1LL <<  2) + (1LL <<  3) + (1LL <<  4) + (1LL <<  5) + (1LL <<  6) + (1LL <<  7) + 
                   (1LL <<  8) + (1LL <<  9) + (1LL << 10) + (1LL << 11) + (1LL << 12) + (1LL << 13) + (1LL << 14) + (1LL << 15) + 
                   (1LL << 16) + (1LL << 17) + (1LL << 18) + (1LL << 19) + (1LL << 20) + (1LL << 21) + (1LL << 22) + (1LL << 23) + 
                   (1LL << 24) + (1LL << 25) + (1LL << 26) + (1LL << 27) + (1LL << 28) + (1LL << 29) + (1LL << 30) + (1LL << 31) +  
                   (1LL << 32) + (1LL << 33) + (1LL << 34) + (1LL << 35) + (1LL << 36) + (1LL << 37) + (1LL << 38) + (1LL << 39) + 
                   (1LL << 40) + (1LL << 41) + (1LL << 42) + (1LL << 43) + (1LL << 44) + (1LL << 45) + (1LL << 46) + (1LL << 47) + 
                   (1LL << 48) + (1LL << 49) + (1LL << 50) + (1LL << 51) + (1LL << 52) + (1LL << 53) + (1LL << 54) + (1LL << 55) + 
                   (1LL << 56) + (1LL << 57) + (1LL << 58) + (1LL << 59) + (1LL << 60) + (1LL << 61) + (1LL << 62) }; 
#endif 
#ifndef UINT64_MAX
enum { UINT64_MAX = INT64_MAX + (1LL << 63) }; 
#endif
 
enum { INT_BYTESIZE = sizeof(int) }; 
enum { INT_BITSIZE = (INT_BYTESIZE << 3) }; 
#ifndef INT_MAX 
enum { INT_MAX = (8 == INT_BITSIZE ? INT8_MAX : 16 == INT_BITSIZE ? INT16_MAX : 32 == INT_BITSIZE ? INT32_MAX : 64 == INT_BITSIZE ? INT64_MAX : -1) }; 
#endif 
static char INT_MAX__ASSERT_DEFINED[INT_MAX > 0 ? 1 : -1] = {}; 

#ifndef INT8_MIN
enum { INT8_MIN   =  (~INT8_MAX) }; 
#endif 
#ifndef INT16_MIN
enum { INT16_MIN  = (~INT16_MAX) }; 
#endif 
#ifndef INT24_MIN
enum { INT24_MIN  = (~INT24_MAX) }; 
#endif 
#ifndef INT32_MIN
enum { INT32_MIN  = (~INT32_MAX) }; 
#endif 
#ifndef INT64_MIN
enum { INT64_MIN  = (~INT64_MAX) }; 
#endif 
#ifndef INT_MIN 
enum { INT_MIN    =   (~INT_MAX) }; 
#endif 

#ifndef UINT8_MIN
enum { UINT8_MIN   =  0 }; 
#endif 
#ifndef UINT16_MIN
enum { UINT16_MIN  = 0 }; 
#endif 
#ifndef UINT24_MIN
enum { UINT24_MIN  = 0 }; 
#endif 
#ifndef UINT32_MIN
enum { UINT32_MIN  = 0 }; 
#endif 
#ifndef UINT64_MIN
enum { UINT64_MIN  = 0 }; 
#endif 
#ifndef UINT_MIN 
enum { UINT_MIN    = 0 }; 
#endif 


#if 1
enum { STDIN_FILENO  = 0 }; 
enum { STDOUT_FILENO = 1 }; 
enum { STDERR_FILENO = 2 }; 
#else 
enum {  stdin_d  = 0 }; 
enum { stdout_d = 1 }; 
enum { stderr_d = 2 }; 
enum {  stdin__fdes =  stdin_d }; 
enum { stdout__fdes = stdout_d }; 
enum { stderr__fdes = stderr_d }; 
enum {  stdin__fileno =  stdin_d }; 
enum { stdout__fileno = stdout_d }; 
enum { stderr__fileno = stderr_d }; 
#endif 

enum { EOF = (-1) }; 
enum { EOL = '\n' }; 

#endif /* LIB__01__PRE_HEADER_CI */
