

static void anime__endianness_byte_swap(anime_t * this) { 
  // TODO: Changer toutes ces macros en fonctions afin d’automatiser le processus. 
  //       Car, avec des macros, on peut pas sélectionner sur SIZEOF. 
  //       Donc, si on change la taille de int_lexeme_t ou d’un champ, alors il faut changer le code… 
  assert(sizeof(int_anime_error_t ) == sizeof(int16_t)); 
  assert(sizeof(int_anime_string_t) == sizeof(int16_t)); 
  assert(sizeof(int_lexeme_t      ) == sizeof(int16_t)); 
  assert(sizeof(int_lexeme_value_t) == sizeof(int16_t)); 

#define ENDIANNESS__SWAP__INT_LEXEME ENDIANNESS__SWAP__INT16 
  
  ENDIANNESS__SWAP__UINT16(this -> error_size); 
  ENDIANNESS__SWAP__UINT16(this -> string_stack_nb); 
  ENDIANNESS__SWAP__INT16(this -> copyright); 
  ENDIANNESS__SWAP__INT16(this -> filename); 
  ENDIANNESS__SWAP__INT16(this -> lexeme_value_stack__size); 
  ENDIANNESS__SWAP__INT16(this -> lexeme_value_stack__nb); 
  for (int_lexeme_t lexeme_i = 0; lexeme_i < this -> lexeme_stack__nb; lexeme_i++) { 
    ENDIANNESS__SWAP__INT16(this -> lexeme_stack__value); 
  }; 
  ENDIANNESS__SWAP__INT16(this -> lexeme_stack__size); 
  ENDIANNESS__SWAP__INT16(this -> lexeme_stack__nb); 
  
  
  
#define ENDIANNESS__SWAP__FLOAT_4(ident1,ident2,ident3,ident4) ENDIANNESS__SWAP__FLOAT(this -> ident1);	ENDIANNESS__SWAP__FLOAT(this -> ident2); ENDIANNESS__SWAP__FLOAT(this -> ident3); ENDIANNESS__SWAP__FLOAT(this -> ident4); 
  
  ENDIANNESS__SWAP__FLOAT_4(choc_longueur, choc_largeur, choc_hauteur, masse); 
  
  ENDIANNESS__SWAP__INT16(this -> vie); 

#define ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident0,__taille__) { for (int item_i = 0; item_i < (__taille__); item_i++) { ENDIANNESS__SWAP__INT16(this -> glue2(__prefix__,ident0)[item_i]); }; }; 
#define ENDIANNESS__SWAP__INT16__ARRAY_1(__prefix__,ident1,__taille__) ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident1,__taille__); 
#define ENDIANNESS__SWAP__INT16__ARRAY_2(__prefix__,ident1,ident2,__taille__) ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident2,__taille__); 
#define ENDIANNESS__SWAP__INT16__ARRAY_3(__prefix__,ident1,ident2,ident3,__taille__) ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident3,__taille__); 
#define ENDIANNESS__SWAP__INT16__ARRAY_4(__prefix__,ident1,ident2,ident3,ident4,__taille__) ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident4,__taille__); 
#define ENDIANNESS__SWAP__INT16__ARRAY_5(__prefix__,ident1,ident2,ident3,ident4,ident5,__taille__) ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident4,__taille__); ENDIANNESS__SWAP__INT16__ARRAY(__prefix__,ident5,__taille__); 

#define ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident0,__taille__) { for (int item_i = 0; item_i < (__taille__); item_i++) { ENDIANNESS__SWAP__FLOAT(this -> glue2(__prefix__,ident0)[item_i]); }; }; 
#define ENDIANNESS__SWAP__FLOAT__ARRAY_1(__prefix__,ident1,__taille__) ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident1,__taille__); 
#define ENDIANNESS__SWAP__FLOAT__ARRAY_2(__prefix__,ident1,ident2,__taille__) ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident2,__taille__); 
#define ENDIANNESS__SWAP__FLOAT__ARRAY_3(__prefix__,ident1,ident2,ident3,__taille__) ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident3,__taille__); 
#define ENDIANNESS__SWAP__FLOAT__ARRAY_4(__prefix__,ident1,ident2,ident3,ident4,__taille__) ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident4,__taille__); 
#define ENDIANNESS__SWAP__FLOAT__ARRAY_5(__prefix__,ident1,ident2,ident3,ident4,ident5,__taille__) ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident4,__taille__); ENDIANNESS__SWAP__FLOAT__ARRAY(__prefix__,ident5,__taille__); 


  ENDIANNESS__SWAP__INT16__ARRAY_5(actions_,nom,affichage,icone,gestionnaire_fichier,gestionnaire_proc,this -> actions_nb); 
  ENDIANNESS__SWAP__INT16__ARRAY_5(events_,nom,genere_code_fichier,genere_code_proc,traitement_code_fichier,traitement_code_proc,this -> events_nb); 
  ENDIANNESS__SWAP__INT16__ARRAY_2(membres_,nom,image,this -> membres_nb); 
  ENDIANNESS__SWAP__FLOAT__ARRAY_3(membres_,largeur,hauteur,angle_max_y,this -> membres_nb); 
  ENDIANNESS__SWAP__INT16__ARRAY_4(racines_,x,y,z,angle_y,this -> racines_nb); 

  // LEXEME_I 

#define ENDIANNESS__SWAP__INT_LEXEME_3(ident1,ident2,ident3) ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident1,__lexeme_i)); ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident2,__lexeme_i)); ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident3,__lexeme_i)); 
#define ENDIANNESS__SWAP__INT_LEXEME_4(ident1,ident2,ident3,ident4) ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident1,__lexeme_i)); ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident2,__lexeme_i)); ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident3,__lexeme_i)); ENDIANNESS__SWAP__INT_LEXEME(this -> glue2(ident4,__lexeme_i)); 
  
  ENDIANNESS__SWAP__INT_LEXEME_4(choc_longueur,choc_largeur,choc_hauteur,masse);
  ENDIANNESS__SWAP__INT_LEXEME_3(vie,invincible,hostile);   
  
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident0,__taille__) { for (int item_i = 0; item_i < (__taille__); item_i++) { ENDIANNESS__SWAP__INT_LEXEME(this -> glue3(__prefix__,ident0,__lexeme_i)[item_i]); }; }; 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_1(__prefix__,ident1,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_2(__prefix__,ident1,ident2,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident2,__taille__); 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_3(__prefix__,ident1,ident2,ident3,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident3,__taille__); 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_4(__prefix__,ident1,ident2,ident3,ident4,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident4,__taille__); 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_5(__prefix__,ident1,ident2,ident3,ident4,ident5,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident4,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident5,__taille__); 
#define ENDIANNESS__SWAP__INT_LEXEME__ARRAY_6(__prefix__,ident1,ident2,ident3,ident4,ident5,ident6,__taille__) ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident1,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident2,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident3,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident4,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident5,__taille__); ENDIANNESS__SWAP__INT_LEXEME__ARRAY(__prefix__,ident6,__taille__); 

  ENDIANNESS__SWAP__INT_LEXEME__ARRAY_5(actions_,nom,affichage,icone,gestionnaire_fichier,gestionnaire_proc,this -> actions_nb); 
  ENDIANNESS__SWAP__INT_LEXEME__ARRAY_6(events_,nom,genere_type,genere_code_fichier,genere_code_proc,traitement_code_fichier,traitement_code_proc,this -> events_nb); 
  ENDIANNESS__SWAP__INT_LEXEME__ARRAY_5(membres_,nom,image,largeur,hauteur,angle_max_y,this -> membres_nb); 
  ENDIANNESS__SWAP__INT_LEXEME__ARRAY_5(racines_,qui,x,y,z,angle_y,this -> racines_nb); 


}; 
