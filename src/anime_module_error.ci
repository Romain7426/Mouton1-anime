
#ifdef ANIME__ERROR__H 
#  ifdef ANIME__ERROR__C 
#    error Exclusivement soit ANIME__ERROR__H soit ANIME__ERROR__C 
#  endif 
#else
#  ifndef ANIME__ERROR__C 
#    define ANIME__ERROR__H 
#  endif 
#endif 

#ifdef ANIME__ERROR__H 
#  define ANIME__ERROR__H__ALREADY_INCLUDED 
#endif 

#ifdef ANIME__ERROR__C 
#  define ANIME__ERROR__C__ALREADY_INCLUDED 
#endif 

#ifdef ANIME__ERROR__H 
#  define EMPTY_ARRAY_DEFINITION 
#  define VALUE_DEFINITION(value)
#else 
#  define EMPTY_ARRAY_DEFINITION = { } 
#  define VALUE_DEFINITION(value) = value
#endif 

#ifndef EXTERN 
#  define EXTERN extern
#endif

#define extern 1
#define static 2
// RL: Lors d’une définition ‘extern’, le mot-clef ‘extern’ doit ne pas être énoncé. 
//     Lors d’une définition ‘static’, le mot-clef ‘static’ doit être répété. 
//     D’où la macro ‘EXTERN_DEFINITION’. 
#if   (EXTERN == extern) 
#  define EXTERN_DECLARATION extern
#  define EXTERN_DEFINITION 
#elif (EXTERN == static) 
#  define EXTERN_DECLARATION static
#  define EXTERN_DEFINITION  static
#else 
#  define EXTERN_DECLARATION extern
#  define EXTERN_DEFINITION 
#endif 
#undef extern 
#undef static 




#ifndef ANIME__ERROR__LIST 
#  error Il faut définir ‘ANIME__ERROR__LIST’ 
#endif 


// ___________________________________ 
// **** ANIME__ERROR **** 

#ifdef ANIME__ERROR__H 

#define X(ident, value) ident value, 
enum { 
  ANIME__ERROR__LIST
}; 
#undef X 

#define X(ident, value) ident##___ID, 
enum { 
  ANIME__ERROR__LIST
  ANIME__ERROR__COUNT
}; 
#undef X 

typedef                  int8_t                  int_anime_error_t; 
EXTERN_DECLARATION const char *                  int_anime_error__get_cstr(const int_anime_error_t error); 
EXTERN_DECLARATION const int_anime_error_t int_anime_error__id_value[ANIME__ERROR__COUNT]; 
enum {                                           int_anime_error__id_value__size = ARRAY_SIZE(int_anime_error__id_value) }; 
EXTERN_DECLARATION const uint8_t                 int_anime_error__id_value__size__compiled_value; 
EXTERN_DECLARATION const char *                  int_anime_error__id_cstr [ANIME__ERROR__COUNT + 1]; 
enum {                                           int_anime_error__id_cstr__size = ARRAY_SIZE(int_anime_error__id_cstr) }; 
EXTERN_DECLARATION const uint8_t                 int_anime_error__id_cstr__size__compiled_value; 

#define X(ident, value) EXTERN_DECLARATION const int_anime_error_t ident##__compiled_value; 
ANIME__ERROR__LIST 
#undef X 

static void int_anime_error__check_and_assert(void) { 
  assert(ANIME__ERROR__COUNT <= UINT8_MAX); 
#define X(ident, value) assert(ident == ident##__compiled_value); 
ANIME__ERROR__LIST 
#undef X 
  assert(int_anime_error__id_cstr__size  == int_anime_error__id_cstr__size__compiled_value ); 
  assert(int_anime_error__id_value__size == int_anime_error__id_value__size__compiled_value); 
}; 

#else /* ANIME__ERROR__C */

#define X(ident, value) EXTERN_DEFINITION const int_anime_error_t ident##__compiled_value = ident; 
ANIME__ERROR__LIST 
#undef X 

#define X(ident, value) #ident, 
EXTERN_DEFINITION const char * int_anime_error__id_cstr[ANIME__ERROR__COUNT + 1] = { 
ANIME__ERROR__LIST 
  NULL
}; 
#undef X 
 
EXTERN_DEFINITION const uint8_t int_anime_error__id_cstr__size__compiled_value = ARRAY_SIZE(int_anime_error__id_cstr); 

#define X(ident, value) ident, 
EXTERN_DEFINITION const int_anime_error_t int_anime_error__id_value[ANIME__ERROR__COUNT] = { 
ANIME__ERROR__LIST 
}; 
#undef X 

EXTERN_DEFINITION const uint8_t int_anime_error__id_value__size__compiled_value = ARRAY_SIZE(int_anime_error__id_value); 

const char * int_anime_error__get_cstr(const int_anime_error_t error) { 
  const char * error__cstr = NULL; 
  switch (error) { 
#define X(ident, value) case ident: error__cstr = #ident; break; 
  ANIME__ERROR__LIST
#undef X 
  }; 
  return error__cstr; 
}; 

#endif /* ANIME__ERROR__H */

#undef EXTERN_DECLARATION
#undef EXTERN_DEFINITION
#undef EXTERN 
#undef EMPTY_ARRAY_DEFINITION
#undef VALUE_DEFINITION

